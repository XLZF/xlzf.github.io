<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Harris Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-09T08:37:34.572Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Harris</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Wireshark-三次握手四次挥手</title>
    <link href="http://example.com/2022/05/09/wireshark-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>http://example.com/2022/05/09/wireshark-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</id>
    <published>2022-05-09T08:27:02.000Z</published>
    <updated>2022-05-09T08:37:34.572Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202205091634792.jpeg"></p><h3 id="Wireshark-安装"><a href="#Wireshark-安装" class="headerlink" title="Wireshark 安装"></a>Wireshark 安装</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202205091637432.png" alt="image-20220509162910659"></p><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202205091637794.png" alt="image-20220509162745845"></p><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202205091637925.png" alt="image-20220509162750770"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="抓包" scheme="http://example.com/tags/%E6%8A%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>面试题</title>
    <link href="http://example.com/2022/05/07/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://example.com/2022/05/07/%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-05-07T13:57:08.000Z</published>
    <updated>2022-05-07T14:16:38.865Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一题："><a href="#第一题：" class="headerlink" title="第一题："></a>第一题：</h2><p>输入一个数字n，求第一个大于该数字的回文数字</p><table><thead><tr><th>输入</th><th>输出</th></tr></thead><tbody><tr><td>808</td><td>818</td></tr><tr><td>2133</td><td>2222</td></tr></tbody></table><h2 id="第二题："><a href="#第二题：" class="headerlink" title="第二题："></a>第二题：</h2><p>输入两个人的苹果个数的和与差，确定他们的苹果个数。 输入：苹果的数量和，苹果的数量差，输出： 两人各自苹果的个数。（请用计算机方法，而不是数学公式计算）</p><table><thead><tr><th>输入</th><th>输出</th></tr></thead><tbody><tr><td>10，2</td><td>6，4</td></tr><tr><td>20，6</td><td>13，7</td></tr><tr><td>30，9</td><td>无</td></tr></tbody></table><h2 id="第三题："><a href="#第三题：" class="headerlink" title="第三题："></a>第三题：</h2><p>设有 n 个正整数<code>a1，a2，a3，a4……an</code> ，将它们联接成一排，相邻数字首尾相接，组成一个最大的整数。</p><p>输入格式</p><p>第一行有一个整数，表示数字个数 n。</p><p>第二行有 n个整数，表示给出的 n个整数值。</p><p>输出格式</p><p>一个正整数，表示最大的整数</p><table><thead><tr><th>输入</th><th>输出</th></tr></thead><tbody><tr><td>3  13 312 343</td><td>34331213</td></tr><tr><td>4  7 13 4 246</td><td>7424613</td></tr></tbody></table><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HuiwenNumber</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 控制台主方法</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;args&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;获取回数：1；获取和差值：2；获取正整数：3&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> result = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (result)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                    Gethuishu();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                    GetHeCha();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                    GetInt();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;请输入提示的值！&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取回数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Gethuishu</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;请输入初始数字：&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> num = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">            GetHuiShu.DiGui(num);</span><br><span class="line"></span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取和差数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetHeCha</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;请输入和：&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> heNum = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;请输入差：&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> chaNum = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> heNum_ = Convert.ToInt32(heNum);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> chaNum_ = Convert.ToInt32(chaNum);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> MaxNum = (heNum_ + chaNum_) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> MinNum = (heNum_ - chaNum_) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;A有苹果&quot;</span> + MaxNum + <span class="string">&quot;个,B有苹果&quot;</span> + MinNum + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取正整数,通过输入的整数，相连接组成最大的整数</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetInt</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;请输入整数个数：&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> numlength = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">            List&lt;<span class="built_in">int</span>&gt; listYuan = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; Convert.ToInt32(numlength); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;请输入第&quot;</span> + i + <span class="string">&quot;个数字:&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">string</span> numarr = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">                listYuan.Add(Convert.ToInt32(numarr));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            List&lt;IntList&gt; listEntity = <span class="keyword">new</span> List&lt;IntList&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; listYuan.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                listEntity.Add(<span class="keyword">new</span> IntList &#123; </span><br><span class="line">                    IntIndex = i, </span><br><span class="line">                    IntYuan = listYuan[i], </span><br><span class="line">                    IntSub = Convert.ToInt32(listYuan[i].ToString().Substring(<span class="number">0</span>, <span class="number">1</span>)) </span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            maopao(listEntity);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> ZDZZS = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = listEntity.Count - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                ZDZZS += listEntity[i].IntYuan;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;最大正整数&quot;</span> + ZDZZS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 冒泡排序</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;intLists&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;IntList&gt; <span class="title">maopao</span>(<span class="params">List&lt;IntList&gt; intLists</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; intLists.Count - <span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; intLists.Count - <span class="number">1</span> - i; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (intLists[j].IntSub &gt; intLists[j + <span class="number">1</span>].IntSub)</span><br><span class="line">                    &#123;</span><br><span class="line">                        IntList temp = intLists[j];</span><br><span class="line">                        intLists[j] = intLists[j + <span class="number">1</span>];</span><br><span class="line">                        intLists[j + <span class="number">1</span>] = temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> intLists;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GetHuiShu</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 递归</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;number&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DiGui</span>(<span class="params"><span class="built_in">string</span> number</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (IsHuiWenNum(number))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(number + <span class="string">&quot;是回文数字！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> newn = Convert.ToInt32(number);</span><br><span class="line"></span><br><span class="line">                newn += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                DiGui(newn.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 判断是否为回文数字</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;Num&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsHuiWenNum</span>(<span class="params"><span class="built_in">string</span> Num</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//先判断数字长度</span></span><br><span class="line">            <span class="built_in">int</span> mo = Num.Length % <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">string</span> hou;</span><br><span class="line">            <span class="built_in">string</span> qian;</span><br><span class="line">            <span class="comment">//长度是奇数</span></span><br><span class="line">            <span class="keyword">if</span> (mo &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> chang = (Num.Length - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">                qian = Num.Substring(<span class="number">0</span>, chang);</span><br><span class="line"></span><br><span class="line">                hou = Num.Substring((Num.Length - chang - <span class="number">1</span>), chang);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                qian = Num.Substring(<span class="number">0</span>, Num.Length / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">                hou = Num.Substring(Num.Length / <span class="number">2</span>, Num.Length / <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (qian == ReverseStr(hou))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 字符串反转</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;original&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">ReverseStr</span>(<span class="params"><span class="built_in">string</span> original</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">char</span>[] arr = original.ToCharArray();</span><br><span class="line">            Array.Reverse(arr);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">string</span>(arr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IntList</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> IntYuan &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> IntIndex &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> IntSub &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h3><p>第一题</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202205072210674.png" alt="image-20220507220813301"></p><p>第二题</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202205072210233.png" alt="image-20220507220853011"></p><p>第三题</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202205072211758.png" alt="image-20220507221036084"></p>]]></content>
    
    
    <summary type="html">记录一下</summary>
    
    
    
    <category term="面试题" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="算法题" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>CSharp-关键字</title>
    <link href="http://example.com/2022/05/06/CSharp-%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://example.com/2022/05/06/CSharp-%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2022-05-06T01:17:14.000Z</published>
    <updated>2022-05-07T08:04:49.224Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-关键字"><a href="#C-关键字" class="headerlink" title="C# 关键字"></a>C# 关键字</h1><h2 id="Abstract（抽象-）"><a href="#Abstract（抽象-）" class="headerlink" title="Abstract（抽象 ）"></a>Abstract（抽象 ）</h2><h2 id="Virtual（虚方法）"><a href="#Virtual（虚方法）" class="headerlink" title="Virtual（虚方法）"></a>Virtual（虚方法）</h2><h2 id="Abstract-和-Virtual-区别"><a href="#Abstract-和-Virtual-区别" class="headerlink" title="Abstract 和 Virtual 区别"></a>Abstract 和 Virtual 区别</h2><p>在C#中virtual和abstract两者是都为了让子类中心定义，来覆盖父类的定义。</p><ol><li><p>virtual（虚方法）或者（abstract）抽象方法是不能私有的，二者中private成员是不能被子类访问的。</p></li><li><p>virtual可以被子类重写，abstract必须被子类重写。</p></li><li><p>如果重写了virtual，子类方法中必须用override来实现方法的重写</p></li><li><p>如果类成员被abstract修饰，那么该类必须也添加abstract。抽象类才有抽象方法</p></li></ol>]]></content>
    
    
    <summary type="html">温故而知新，可以为师矣。</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="Base" scheme="http://example.com/tags/Base/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-代理模式</title>
    <link href="http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-05T09:38:11.000Z</published>
    <updated>2022-05-05T10:00:56.112Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式-代理模式"><a href="#设计模式-代理模式" class="headerlink" title="设计模式-代理模式"></a>设计模式-代理模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>代理模式（<code>Proxy Pattern</code>）。属于结构型模式。为其它对象提供一种代理以控制对该对象的访问。</p><p>代理的概念很简单，就是想调用A类方法时，不直接调用，而是通过调用代理B类的方法，由B类方法去调用A类的方法。</p><p>模式中的角色</p><ol><li><code>Subject</code>（抽象对象）：它声明了真实对象和代理对象的共同接口，这样一来在任何使用真实对象的地方都可以使用代理对象，客户端通常需要针对抽象对象角色进行编程。</li><li><code>Proxy</code>（代理对象）：代理对象与真实对象实现相同的接口，所以它能够在任何时刻都能够代理真实对象。代理对象内部包含有对真实对象的引用，所以她可以操作真实对象，同时也可以附加其他的操作，相当于对真实对象进行封装。</li><li><code>RealSubject</code>（真实对象）：它定义了所代表的真实对象，在真实对象角色中实现了真实的业务操作，客户端可以通过代理对象间接调用真实对象中定义的操作。</li></ol><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><p>一个害羞男孩追求一个叫如花的女孩，但是自己不敢送礼物，就找了一个朋友代理他给如花送礼物</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 送礼物的人 （抽象主题角色）</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">GiveGiftPerson</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//送礼物功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">GiveGift</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 害羞男孩  （真实主题角色）</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ShyBoy</span> : <span class="title">GiveGiftPerson</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">GiveGift</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;害羞男孩送礼物给如花~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 害羞男孩的朋友（代理主题角色）</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Friend</span> : <span class="title">GiveGiftPerson</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//引用真实主题实例</span></span><br><span class="line">    ShyBoy shyboy = <span class="keyword">new</span> ShyBoy();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">GiveGift</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//朋友一顿分析后，觉得如花是个好人</span></span><br><span class="line">        <span class="built_in">bool</span> IsRuhuaGood = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (IsRuhuaGood)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//调用真实主题的方法</span></span><br><span class="line">            shyboy.GiveGift();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//因为不能直接访问到真实对象所以我们不能直接new ShyBoy()去送礼物。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//代码中使用的是代理对象</span></span><br><span class="line">        Friend friend = <span class="keyword">new</span> Friend();</span><br><span class="line">        friend.GiveGift();</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>代理模式能够将调用用于真正被调用的对象隔离，在一定程度上降低了系统的耦合度。</li><li>客户端可以针对抽象主题角色进行编程，增加和更换代理类无须修改源代码，符合开闭原则，系统具有较好的灵活性和可扩展性。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢，例如保护代理。</li><li>实现代理模式需要额外的工作，而且有些代理模式的实现过程较为复杂，例如远程代理。</li></ol><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>当客户端对象需要访问远程主机中的对象时可以使用远程代理</li><li>当需要用一个消耗资源较少的对象来代表一个消耗资源较多的对象，从而降低系统开销、缩短运行时间时可以使用虚拟代理，例如一个对象需要很长时间才能完成加载时。</li><li>当需要为某一个被频繁访问的操作结果提供一个临时存储空间，以供多个客户端共享访问这些结果时可以使用缓冲代理。通过使用缓冲代理，系统无须在客户端每一次访问时都重新执行操作，只需直接从临时缓冲区获取操作结果即可。</li><li>当需要控制对一个对象的访问，为不同用户提供不同级别的访问权限时可以使用保护代理。</li><li>当需要为一个对象的访问（引用）提供一些额外的操作时可以使用智能引用代理。</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>远程代理(Remote Proxy)：为一个位于不同的地址空间的对象提供一个本地的代理对象，这个不同的地址空间可以是在同一台主机中，也可是在另一台主机中，远程代理又称为大使(Ambassador)。</li><li>虚拟代理(Virtual Proxy)：如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建。</li><li>保护代理(Protect Proxy)：控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限。</li><li>缓冲代理(Cache Proxy)：为某一个目标操作的结果提供临时的存储空间，以便多个客户端可以共享这些结果。</li><li>智能引用代理(Smart Reference Proxy)：当一个对象被引用时，提供一些额外的操作，例如将对象被调用的次数记录下来等。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/346511886">C#设计模式笔记之代理模式 (Proxy Pattern) - 知乎 (zhihu.com)</a></p><p><a href="https://www.cnblogs.com/yuyangbk/p/13958411.html">C#设计模式——代理模式 - 心中的天空之城 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <summary type="html">为其它对象提供一种代理以控制对该对象的访问</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-享元模式</title>
    <link href="http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-05T07:45:16.000Z</published>
    <updated>2022-05-05T08:05:34.238Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式-享元模式"><a href="#设计模式-享元模式" class="headerlink" title="设计模式-享元模式"></a>设计模式-享元模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a><a href="https://www.cnblogs.com/wyy1234/p/10041658.html">概念</a></h2><p>​        <em><code>FlyweightPattern</code></em></p><p>​        在软件开发中我们经常遇到多次使用相似或者相同对象的情况，如果每次使用这个对象都去new一个新的实例会很浪费资源。这时候很多人会想到前边介绍过的一个设计模式：</p><p>​        原型模式，原型模式通过拷贝现有对象来生成一个新的实例，使用拷贝来替代new。原型模式可以很好的解决创建多个相同/相似实例的问题，为什么还要用享元模式呢？</p><p>​        这是因为这两种模式的使用场景是不同的，原型模式侧重于”创建“，我们通过拷贝确确实实的创建了新的实例，它属于创建型设计模式；而享元模式侧重于“重用”，即如果有现有的实例就不去创建了，直接拿来用就行了。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><h3 id="抽象车类"><a href="#抽象车类" class="headerlink" title="抽象车类"></a>抽象车类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Car</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//开车</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Use</span>(<span class="params">Driver d</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体车类"><a href="#具体车类" class="headerlink" title="具体车类"></a>具体车类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RealCar</span> : <span class="title">Car</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//颜色</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Color &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RealCar</span>(<span class="params"><span class="built_in">string</span> color</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开车</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Use</span>(<span class="params">Driver d</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;d.Name&#125;</span>开<span class="subst">&#123;<span class="keyword">this</span>.Color&#125;</span>的车&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="车库"><a href="#车库" class="headerlink" title="车库"></a>车库</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 车库</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CarFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, Car&gt; carPool = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, Car&gt;();</span><br><span class="line">    <span class="comment">//初始的时候，只有红色和绿色两辆汽车</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CarFactory</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        carPool.Add(<span class="string">&quot;红色&quot;</span>, <span class="keyword">new</span> RealCar(<span class="string">&quot;红色&quot;</span>));</span><br><span class="line">        carPool.Add(<span class="string">&quot;绿色&quot;</span>, <span class="keyword">new</span> RealCar(<span class="string">&quot;蓝色&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取汽车</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">GetCar</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果车库有就用车库里的车，车库没有就买一个（new一个）</span></span><br><span class="line">        <span class="keyword">if</span> (!carPool.ContainsKey(key))</span><br><span class="line">        &#123;</span><br><span class="line">            carPool.Add(key, <span class="keyword">new</span> RealCar(key));</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;没有&#123;0&#125;的车，就买一个&quot;</span>, key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> carPool[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="司机类"><a href="#司机类" class="headerlink" title="司机类"></a>司机类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 司机类</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Driver</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Driver</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    CarFactory carFactory = <span class="keyword">new</span> CarFactory();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//小头爸爸开蓝色的车</span></span><br><span class="line">    Driver d1 = <span class="keyword">new</span> Driver(<span class="string">&quot;小头爸爸&quot;</span>);</span><br><span class="line">    Car c1 = carFactory.GetCar(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">    c1.Use(d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//扁头妈妈开蓝色的车</span></span><br><span class="line">    Driver d2 = <span class="keyword">new</span> Driver(<span class="string">&quot;扁头妈妈&quot;</span>);</span><br><span class="line">    Car c2 = carFactory.GetCar(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">    c2.Use(d2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c1.Equals(c2))</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;小头爸爸和扁头妈妈开的是同一辆车&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//车库没有白色的车，就new一辆白色的车</span></span><br><span class="line">    Driver d3 = <span class="keyword">new</span> Driver(<span class="string">&quot;大头儿子&quot;</span>);</span><br><span class="line">    Car c3 = carFactory.GetCar(<span class="string">&quot;白色&quot;</span>);</span><br><span class="line">    c3.Use(d3);</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>​        当系统中大量使用某些相同或者相似的对象，这些对象要耗费大量的内存，并且这些对象剔除外部状态后可以通过一个对象来替代，这时可以考虑使用享元模式。在软件系统中享元模式大量用于各种池技术，如数据库连接对象池，字符串缓存池，<code>HttpApplication</code>池等。</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>降低了系统中对象的数量，从而降低了系统中细粒度对象给内存带来的压力。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>需要分离对象的外部状态和内部状态，使用不当会引起线程安全问题，提高了系统的复杂度。</li></ol>]]></content>
    
    
    <summary type="html">都是拿对象来用，享元模式重在重用，原型模式重在拷贝</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-外观模式</title>
    <link href="http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-05T07:23:15.000Z</published>
    <updated>2022-05-05T07:42:02.337Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式-外观模式"><a href="#设计模式-外观模式" class="headerlink" title="设计模式-外观模式"></a>设计模式-外观模式</h1><h2 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h2><blockquote><p>为子系统中的一组接口提供一个一致的界面，用来访问子系统中的一群接口</p></blockquote><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a><a href="https://www.cnblogs.com/tianzhiliang/archive/2011/09/30/2196249.html">举个栗子</a></h2><p>在家里看个电影需要干些啥。把投影仪、功放、屏幕、<code>DVD</code>、灯光 这五个看做五个子系统。</p><ol><li>打开投影仪</li><li>打开功放</li><li>打开屏幕</li><li>打开<code>DVD</code></li><li>打开灯光</li></ol><p>看完了怎么关闭</p><ol><li>关闭投影仪</li><li>关闭功放</li><li>关闭屏幕</li><li>关闭<code>DVD</code></li><li>关闭灯光</li></ol><h2 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span> </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 投影仪 </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Projector</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OpenProjector</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;打开投影仪&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CloseProjector</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;关闭投影仪&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetWideScreen</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;投影仪状态为宽屏模式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetStandardScreen</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;投影仪状态为标准模式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span> </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 功放机 </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Amplifier</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OpenAmplifier</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;打开功放机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CloseAmplifier</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;关闭功放机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span> </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 屏幕 </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Screen</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OpenScreen</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;打开屏幕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CloseScreen</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;关闭屏幕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span> </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> DVD播放器 </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DVDPlayer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OpenDVDPlayer</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;打开 DVD 播放器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CloseDVDPlayer</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;关闭 DVD 播放器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span> </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 灯光 </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Light</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OpenLight</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;打开灯光&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CloseLight</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;关闭灯光&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义一个外观"><a href="#定义一个外观" class="headerlink" title="定义一个外观"></a>定义一个外观</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span> </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 定义一个外观 </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MovieFacade</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 在外观类中必须保存有子系统中各个对象 </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line">    <span class="keyword">private</span> Projector projector;</span><br><span class="line">    <span class="keyword">private</span> Amplifier amplifier;</span><br><span class="line">    <span class="keyword">private</span> Screen screen;</span><br><span class="line">    <span class="keyword">private</span> DVDPlayer dvdPlayer;</span><br><span class="line">    <span class="keyword">private</span> Light light;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovieFacade</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        projector = <span class="keyword">new</span> Projector();</span><br><span class="line">        amplifier = <span class="keyword">new</span> Amplifier();</span><br><span class="line">        screen = <span class="keyword">new</span> Screen();</span><br><span class="line">        dvdPlayer = <span class="keyword">new</span> DVDPlayer();</span><br><span class="line">        light = <span class="keyword">new</span> Light();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 打开电影 </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OpenMovie</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先打开投影仪 </span></span><br><span class="line">        projector.OpenProjector();</span><br><span class="line">        <span class="comment">//再打开功放 </span></span><br><span class="line">        amplifier.OpenAmplifier();</span><br><span class="line">        <span class="comment">//再打开屏幕 </span></span><br><span class="line">        screen.OpenScreen();</span><br><span class="line">        <span class="comment">//再打开 DVD </span></span><br><span class="line">        dvdPlayer.OpenDVDPlayer();</span><br><span class="line">        <span class="comment">//再打开灯光 </span></span><br><span class="line">        light.OpenLight();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 关闭电影 </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CloseMovie</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//关闭投影仪 </span></span><br><span class="line">        projector.CloseProjector();</span><br><span class="line">        <span class="comment">//关闭功放 </span></span><br><span class="line">        amplifier.CloseAmplifier();</span><br><span class="line">        <span class="comment">//关闭屏幕 </span></span><br><span class="line">        screen.CloseScreen();</span><br><span class="line">        <span class="comment">//关闭 DVD </span></span><br><span class="line">        dvdPlayer.CloseDVDPlayer();</span><br><span class="line">        <span class="comment">//关闭灯光 </span></span><br><span class="line">        light.CloseLight();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="看电影"><a href="#看电影" class="headerlink" title="看电影"></a>看电影</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    MovieFacade movie = <span class="keyword">new</span> MovieFacade();</span><br><span class="line">    <span class="comment">//Projector projector = new Projector();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//首先是观看电影 </span></span><br><span class="line">    movie.OpenMovie();</span><br><span class="line">    Console.WriteLine();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//然后是将投影仪模式调到宽屏模式 </span></span><br><span class="line">    <span class="comment">//projector.SetWideScreen();</span></span><br><span class="line">    <span class="comment">//再将投影仪模式调回普通模式 </span></span><br><span class="line">    <span class="comment">//projector.SetStandardScreen();</span></span><br><span class="line">    <span class="comment">//Console.WriteLine();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后就是关闭电影了 </span></span><br><span class="line">    movie.CloseMovie();</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>外观模式对客户端屏蔽了子系统组件，从而简化了接口，减少了客户处理的对象数目并使得子系统的使用更加简单。</li><li>外观模式实现了客户端和子系统之间的松耦合关系，而子系统内部的组件是紧耦合的。松耦合使得子系统的组件变化不会影响到客户端。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>如果新增新的子系统可能需要修改外观类，这就不符合开闭原则，不过这也是没法避免的。</li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>外观模式也叫门面模式。属于<strong>结构型</strong>模式。</p><p>为子系统中的一系列接口提供一个一致的界面，该模式提供了一个高层接口，这个接口使得这一子系统更加容易使用。</p><p>外观模式是通过定义一个外观类将子类包装起来，来简化客户端所调用的方法.</p>]]></content>
    
    
    <summary type="html">为子系统中的一组接口提供一个一致的界面，用来访问子系统中的一群接口。</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-装饰器模式</title>
    <link href="http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-05T06:35:36.000Z</published>
    <updated>2022-05-05T07:01:44.105Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式-装饰器模式"><a href="#设计模式-装饰器模式" class="headerlink" title="设计模式-装饰器模式"></a>设计模式-装饰器模式</h1><h2 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h2><blockquote><p>当我们需要动态添加类的功能同时不改变类的结构时可以使用装饰者模式，装饰类本质是一个现有类的包装。</p></blockquote><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>创建一个人，然后给他穿衣服。</p><h3 id="创建一个人"><a href="#创建一个人" class="headerlink" title="创建一个人"></a>创建一个人</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 人类  具体组件角色</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span> : <span class="title">AbstractPerson</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">//待添加功能的Show方法，具体组件中的Show方法只有原始功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">$&quot;打扮的人是<span class="subst">&#123;<span class="keyword">this</span>.Name&#125;</span>：&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象这个人"><a href="#抽象这个人" class="headerlink" title="抽象这个人"></a>抽象这个人</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 抽象人类  </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractPerson</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//展示装饰方法,我们使用装饰器模式的目的就是为了扩展这个接口的功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Show</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象穿衣服方法"><a href="#抽象穿衣服方法" class="headerlink" title="抽象穿衣服方法"></a>抽象穿衣服方法</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//因为我们装饰后的person要直接替换装饰前的person，所以必须继承AbstractPerson</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Finery</span> : <span class="title">AbstractPerson</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> AbstractPerson person;</span><br><span class="line">    <span class="comment">//设置要打扮的人</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetPerson</span>(<span class="params">AbstractPerson p</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.person = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (person != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            person.Show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="衣服库"><a href="#衣服库" class="headerlink" title="衣服库"></a>衣服库</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//t恤</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TShirt</span> : <span class="title">Finery</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Show();</span><br><span class="line">        Console.Write(<span class="string">&quot;大t恤  &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//网鞋</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sneaker</span> : <span class="title">Finery</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Show();</span><br><span class="line">        Console.Write(<span class="string">&quot;网鞋  &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//西装</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Suit</span> : <span class="title">Finery</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Show();</span><br><span class="line">        Console.Write(<span class="string">&quot;西装  &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//领带</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Tie</span> : <span class="title">Finery</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Show();</span><br><span class="line">        Console.Write(<span class="string">&quot;领带  &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//皮鞋</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Leather</span> : <span class="title">Finery</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Show</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Show();</span><br><span class="line">        Console.Write(<span class="string">&quot;皮鞋  &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="穿衣服咯"><a href="#穿衣服咯" class="headerlink" title="穿衣服咯"></a>穿衣服咯</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//首先要有打扮的人</span></span><br><span class="line">    AbstractPerson xc = <span class="keyword">new</span> Person() &#123; Name = <span class="string">&quot;小菜&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;第一种装饰-------------------&quot;</span>);</span><br><span class="line">    Finery personWithsuit = <span class="keyword">new</span> Suit();</span><br><span class="line">    Finery personWithtie = <span class="keyword">new</span> Tie();</span><br><span class="line">    Finery personWithleather = <span class="keyword">new</span> Leather();</span><br><span class="line">    <span class="comment">//装饰过程</span></span><br><span class="line">    personWithsuit.SetPerson(xc);<span class="comment">//给小菜穿上西服</span></span><br><span class="line">    personWithtie.SetPerson(personWithsuit);<span class="comment">//给穿上西服的小菜带上领带</span></span><br><span class="line">    personWithleather.SetPerson(personWithtie);<span class="comment">//给穿上西服带上领带的小菜穿上皮鞋</span></span><br><span class="line">    personWithleather.Show();</span><br><span class="line"></span><br><span class="line">    Console.WriteLine();</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;第二种装饰-------------------&quot;</span>);</span><br><span class="line">    Finery personWithTshirt = <span class="keyword">new</span> TShirt();</span><br><span class="line">    Finery personWithSneaker = <span class="keyword">new</span> Sneaker();</span><br><span class="line">    <span class="comment">//装饰过程</span></span><br><span class="line">    personWithTshirt.SetPerson(xc);<span class="comment">//给小菜穿上t恤</span></span><br><span class="line">    personWithSneaker.SetPerson(personWithTshirt);<span class="comment">//给穿上t恤的小菜穿上网球鞋</span></span><br><span class="line">    personWithSneaker.Show();</span><br><span class="line"></span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一种装饰-------------------</span><br><span class="line">打扮的人是小菜：西装  领带  皮鞋</span><br><span class="line">第二种装饰-------------------</span><br><span class="line">打扮的人是小菜：大t恤  网鞋</span><br></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>一个类需要添加一些功能，而这些功能按数目、顺序组合形成的效果不一样，如果用继承会造成子类过多，装饰者模式可以很好地解决这个问题；</li><li>使用装饰者模式我们可以动态的添加/删除类的功能，灵活性好</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>多层装饰比较复杂，我们需要注意装饰顺序等因素。如先穿内裤再穿裤子，是正常人；而先穿裤子再穿内裤就是超人了。在开发中先过滤字符串再加密，和先加密字符串再过滤的效果是完全不同的。</li></ol>]]></content>
    
    
    <summary type="html">当我们需要动态添加类的功能同时不改变类的结构时可以使用装饰者模式，装饰类本质是一个现有类的包装。</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-组合模式</title>
    <link href="http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-05T06:23:31.000Z</published>
    <updated>2022-05-05T06:33:41.162Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式-组合模式"><a href="#设计模式-组合模式" class="headerlink" title="设计模式-组合模式"></a>设计模式-组合模式</h1><h2 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h2><blockquote><p>在树形结构的处理中模糊了对象和对象组的概念，使用对象和对象组采用了统一的接口，让我们可以像处理简单对象一样处理对象组。</p></blockquote><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>首先得有个树结构，最先想到的就是<code>OA</code>系统里的组织结构。集团总公司、分公司、部门、岗位、人员等等，下面以员工和部门举栗子。</p><h3 id="先抽个象。"><a href="#先抽个象。" class="headerlink" title="先抽个象。"></a>先抽个象。</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 抽象部件 定义了树枝和树叶的公共属性和接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Component</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Component</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加子节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Component c</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除子节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">Component c</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//展示方法，dept为节点深度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"><span class="built_in">int</span> dept</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树叶子：员工"><a href="#树叶子：员工" class="headerlink" title="树叶子：员工"></a>树叶子：员工</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具体员工，树形结构的Leaf</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Employee</span> : <span class="title">Component</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Leaf不能添加/删除子节点所以空实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Component c</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">Component c</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"><span class="built_in">int</span> dept</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;-&#x27;</span>, dept) + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树枝：部门"><a href="#树枝：部门" class="headerlink" title="树枝：部门"></a>树枝：部门</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 部门类，相当于树枝</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Depart</span> : <span class="title">Component</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Depart</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加子节点</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Component&gt; children = <span class="keyword">new</span> List&lt;Component&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Component c</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        children.Add(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除子节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">Component c</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        children.Remove(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//展示自己和和内部的所有子节点，这里是组合模式的核心</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"><span class="built_in">int</span> dept</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;-&#x27;</span>, dept) + name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> children)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//这里用到了递归的思想</span></span><br><span class="line">            item.Display(dept + <span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最后：攒"><a href="#最后：攒" class="headerlink" title="最后：攒"></a>最后：攒</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Component DepartA = <span class="keyword">new</span> Depart(<span class="string">&quot;A总公司&quot;</span>);</span><br><span class="line">    Component DepartAX = <span class="keyword">new</span> Depart(<span class="string">&quot;AX部门&quot;</span>);</span><br><span class="line">    Component DepartAY = <span class="keyword">new</span> Depart(<span class="string">&quot;AY部门&quot;</span>);</span><br><span class="line">    Component DepartAX1 = <span class="keyword">new</span> Depart(<span class="string">&quot;AX1子部门&quot;</span>);</span><br><span class="line">    Component DepartAX2 = <span class="keyword">new</span> Depart(<span class="string">&quot;AX2子部门&quot;</span>);</span><br><span class="line">    Component Ae1 = <span class="keyword">new</span> Employee(<span class="string">&quot;公司直属员工1&quot;</span>);</span><br><span class="line">    Component AXe1 = <span class="keyword">new</span> Employee(<span class="string">&quot;AX部门员工1&quot;</span>);</span><br><span class="line">    Component AX1e1 = <span class="keyword">new</span> Employee(<span class="string">&quot;AX1部门员工1&quot;</span>);</span><br><span class="line">    Component AX1e2 = <span class="keyword">new</span> Employee(<span class="string">&quot;AX1部门员工2&quot;</span>);</span><br><span class="line">    Component AYe1 = <span class="keyword">new</span> Employee(<span class="string">&quot;AY部门员工1&quot;</span>);</span><br><span class="line">    Component AYe2 = <span class="keyword">new</span> Employee(<span class="string">&quot;AY部门员工2&quot;</span>);</span><br><span class="line">    DepartA.Add(Ae1);</span><br><span class="line">    DepartA.Add(DepartAX);</span><br><span class="line">    DepartA.Add(DepartAY);</span><br><span class="line">    DepartAX.Add(AXe1);</span><br><span class="line">    DepartAX.Add(DepartAX1);</span><br><span class="line">    DepartAX.Add(DepartAX2);</span><br><span class="line">    DepartAX1.Add(AX1e1);</span><br><span class="line">    DepartAX1.Add(AX1e2);</span><br><span class="line">    DepartAY.Add(AYe1);</span><br><span class="line">    DepartAY.Add(AYe2);</span><br><span class="line">    <span class="comment">//遍历总公司</span></span><br><span class="line">    DepartA.Display(<span class="number">1</span>);</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202205051432849.png" alt="image-20220505143244328"></p>]]></content>
    
    
    <summary type="html">在树形结构的处理中模糊了对象和对象组的概念，使用对象和对象组采用了统一的接口，让我们可以像处理简单对象一样处理对象组。</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-桥接模式</title>
    <link href="http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-05T03:42:30.000Z</published>
    <updated>2022-05-05T05:36:16.485Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式-桥接模式"><a href="#设计模式-桥接模式" class="headerlink" title="设计模式-桥接模式"></a>设计模式-桥接模式</h1><h2 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h2><blockquote><p>一个类可以通过多角度来分类，每一种分类都可能变化，那么就把多角度分离出来让各个角度都能独立变化，降低各个角度间的耦合。</p></blockquote><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><blockquote><p>画图形，图形有图形种类和颜色两个指标组成，如果现在要画三种不同的图形并且会有三种不同的颜色，按照现有要求，会每个图形+颜色为一个类的话，会产生9个类或者方法来完成，如果要加图形或者颜色的话，类或者方法会增长的很快，所以需要桥接模式。</p></blockquote><h3 id="形状抽象"><a href="#形状抽象" class="headerlink" title="形状抽象"></a>形状抽象</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//形状内部包含了另一个维度：color</span></span><br><span class="line">    <span class="keyword">protected</span> IColor color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetColor</span>(<span class="params">IColor color</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置形状</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="颜色接口"><a href="#颜色接口" class="headerlink" title="颜色接口"></a>颜色接口</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 颜色接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IColor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Paint</span>(<span class="params"><span class="built_in">string</span> shape</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 蓝色</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Blue</span> : <span class="title">IColor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Paint</span>(<span class="params"><span class="built_in">string</span> shape</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;蓝色的<span class="subst">&#123;shape&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 黄色</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Yellow</span> : <span class="title">IColor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Paint</span>(<span class="params"><span class="built_in">string</span> shape</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;黄色的<span class="subst">&#123;shape&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 红色</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Red</span> : <span class="title">IColor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Paint</span>(<span class="params"><span class="built_in">string</span> shape</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;红色的<span class="subst">&#123;shape&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 圆形</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        color.Paint(<span class="string">&quot;圆形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 长方形</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        color.Paint(<span class="string">&quot;长方形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 三角形</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Triangle</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        color.Paint(<span class="string">&quot;三角形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建形状"><a href="#创建形状" class="headerlink" title="创建形状"></a>创建形状</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Shape circle = <span class="keyword">new</span> Circle();</span><br><span class="line">    IColor blue = <span class="keyword">new</span> Blue();</span><br><span class="line">    circle.SetColor(blue);<span class="comment">//设置颜色</span></span><br><span class="line">    circle.Draw();<span class="comment">//画图</span></span><br><span class="line"></span><br><span class="line">    Shape triangle = <span class="keyword">new</span> Triangle();</span><br><span class="line">    triangle.SetColor(blue);</span><br><span class="line">    triangle.Draw();</span><br><span class="line"></span><br><span class="line">    Console.ReadLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//蓝色圆形</span></span><br><span class="line"><span class="comment">//蓝色三角形</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">一个类可以通过多角度来分类，每一种分类都可能变化，那么就把多角度分离出来让各个角度都能独立变化，降低各个角度间的耦合。</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-适配器模式</title>
    <link href="http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-05T03:10:57.000Z</published>
    <updated>2022-05-05T03:37:15.152Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式-适配器模式"><a href="#设计模式-适配器模式" class="headerlink" title="设计模式-适配器模式"></a>设计模式-适配器模式</h1><h2 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h2><blockquote><p>有对象适配、有类适配。类似于插座转化器，如下栗子。</p></blockquote><h2 id="类适配模式"><a href="#类适配模式" class="headerlink" title="类适配模式"></a>类适配模式</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> 类适配模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ITwo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Request1</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ThreeAdaptee</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Request2</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我是三个孔的插头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ThreeToTwoAdapter</span> : <span class="title">ThreeAdaptee</span>, <span class="title">ITwo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Request1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Request2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><h2 id="类适配模式运行"><a href="#类适配模式运行" class="headerlink" title="类适配模式运行"></a>类适配模式运行</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ITwo change = <span class="keyword">new</span> ThreeToTwoAdapter();</span><br><span class="line"></span><br><span class="line">change.Request1();</span><br><span class="line"></span><br><span class="line">Console.ReadLine();</span><br></pre></td></tr></table></figure><h2 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span> 对象适配模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Two</span><span class="comment">//两口的插头</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Request1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;2个孔的插头可以使用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Three</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Request2</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;3个孔的插头可以使用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TwoToThreeAdapter</span> : <span class="title">Two</span></span><br><span class="line">&#123;</span><br><span class="line">    Three three = <span class="keyword">new</span> Three();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Request1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        three.Request2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><h2 id="对象适配器运行"><a href="#对象适配器运行" class="headerlink" title="对象适配器运行"></a>对象适配器运行</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Two two = <span class="keyword">new</span> TwoToThreeAdapter();</span><br><span class="line"></span><br><span class="line">two.Request1();</span><br><span class="line"></span><br><span class="line">Console.ReadLine();</span><br></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><ol><li>单一职责原则（优点）</li><li>开闭原则（优点）</li><li>代码复杂度增加（缺点）</li></ol><h2 id="适应场景"><a href="#适应场景" class="headerlink" title="适应场景"></a>适应场景</h2><ol><li>如果第三方的接口或者代码于现有的接口、代码不兼容的时候，可以添加一个中间适配器层来解决这样的问题。</li></ol>]]></content>
    
    
    <summary type="html">插座转换器</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-原型模式</title>
    <link href="http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-05T02:20:47.000Z</published>
    <updated>2022-05-05T02:36:35.933Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式-原型模式"><a href="#设计模式-原型模式" class="headerlink" title="设计模式-原型模式"></a>设计模式-原型模式</h1><h2 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h2><blockquote><p>用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。</p></blockquote><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><h3 id="以手机来做个原型"><a href="#以手机来做个原型" class="headerlink" title="以手机来做个原型"></a>以手机来做个原型</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 手机原型</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">MobilePhonePrototype</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _brand;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 品牌</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Brand</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _brand; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MobilePhonePrototype</span>(<span class="params"><span class="built_in">string</span> brand</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>._brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> MobilePhonePrototype <span class="title">Clone</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小米原型"><a href="#小米原型" class="headerlink" title="小米原型"></a>小米原型</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 小米手机原型</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">XiaoMiPrototype</span> : <span class="title">MobilePhonePrototype</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XiaoMiPrototype</span>(<span class="params"><span class="built_in">string</span> brand</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">brand</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> MobilePhonePrototype <span class="title">Clone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (MobilePhonePrototype)<span class="keyword">this</span>.MemberwiseClone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="苹果手机原型"><a href="#苹果手机原型" class="headerlink" title="苹果手机原型"></a>苹果手机原型</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 苹果手机原型</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApplePrototype</span> : <span class="title">MobilePhonePrototype</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApplePrototype</span>(<span class="params"><span class="built_in">string</span> brand</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">brand</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> MobilePhonePrototype <span class="title">Clone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (MobilePhonePrototype)<span class="keyword">this</span>.MemberwiseClone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>由于原型模式<code>Prototype</code>是一种创建型设计模式，它关注的是大量相同或者相似的对象创建问题。通过<code>new</code>一个对象后，然后通过<code>new</code>出来的对象进行复制，创建出相同的对象。也就是通过这种方式来创建对象。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">XiaoMiPrototype xiaomi = <span class="keyword">new</span> XiaoMiPrototype(<span class="string">&quot;小米&quot;</span>);</span><br><span class="line">XiaoMiPrototype xiaomi2 = (XiaoMiPrototype)xiaomi.Clone();</span><br><span class="line">Console.WriteLine(xiaomi2.Brand);</span><br><span class="line"></span><br><span class="line">ApplePrototype iphone = <span class="keyword">new</span> ApplePrototype(<span class="string">&quot;iPhone7 Plus&quot;</span>);</span><br><span class="line">ApplePrototype iphone2 = (ApplePrototype)iphone.Clone();</span><br><span class="line">Console.WriteLine(iphone2.Brand);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-建造者模式</title>
    <link href="http://example.com/2022/05/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/05/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-04T12:10:57.000Z</published>
    <updated>2022-05-05T02:38:11.429Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式-建造者模式"><a href="#设计模式-建造者模式" class="headerlink" title="设计模式-建造者模式"></a>设计模式-建造者模式</h1><h2 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h2><blockquote><p>将一个复杂对象的构建与他的表示分离出来，使得同样的构建过程构建不同的对象。</p></blockquote><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>拿组件电脑方案来举例</p><p>现在市面上组装机的各有不同，有不同的氪金方案。但是方案归方案，无外乎就是</p><h3 id="部件"><a href="#部件" class="headerlink" title="部件"></a>部件</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 电脑部件</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Product</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> CPU</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CPUNAME &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 风扇</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FANNAME &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 内存</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> MEMORY &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 硬盘</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> HARDDISK &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>那现在抽象这些个方法，意思就是如果要安装一部电脑，需要操作这些个步骤。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 构造者 </span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Builder</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 安装CPU</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BUILD_CPU</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 安装风扇</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BUILD_FAN</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 安装内存条</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BUILD_MEMORY</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 安装硬盘</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BUILD_DARDDISK</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 返回安装的电脑</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">GetComputer</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个只是构建电脑的步骤，但是还具体不到实操，接着整</p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>现在准备两种构建电脑的方案</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 方案1：产品A</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductA</span> : <span class="title">Builder</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Product _computer = <span class="keyword">new</span> Product();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BUILD_CPU</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _computer.CPUNAME = <span class="string">&quot;I5&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BUILD_DARDDISK</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _computer.HARDDISK = <span class="string">&quot;金士顿&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BUILD_FAN</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _computer.FANNAME = <span class="string">&quot;九州风神&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BUILD_MEMORY</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _computer.MEMORY = <span class="string">&quot;海盗船&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Product <span class="title">GetComputer</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 方案2产品B</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductB</span> : <span class="title">Builder</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Product _computer = <span class="keyword">new</span> Product();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BUILD_CPU</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _computer.CPUNAME = <span class="string">&quot;I7&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BUILD_DARDDISK</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _computer.HARDDISK = <span class="string">&quot;闪迪&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BUILD_FAN</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _computer.FANNAME = <span class="string">&quot;九州风神&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BUILD_MEMORY</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _computer.MEMORY = <span class="string">&quot;海盗船&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Product <span class="title">GetComputer</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ToDo"><a href="#ToDo" class="headerlink" title="ToDo"></a>ToDo</h3><p>现在已知</p><ol><li>构建电脑的部件：CPU、内存、风扇、硬盘</li><li>构建电脑的步骤：CPU、内存、风扇、硬盘、出厂</li><li>构建电脑的方案：各个部件具体的品牌</li></ol><p>现在需要确定谁来干，那就老板来干吧，小本买卖，当然，如果人多，可以多整几个</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 老板来构建电脑</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bosss</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//构建</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Construct</span>(<span class="params">Builder builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 安装CPU</span></span><br><span class="line">        builder.BUILD_CPU();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//安装硬盘</span></span><br><span class="line">        builder.BUILD_DARDDISK();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//安装风扇</span></span><br><span class="line">        builder.BUILD_FAN();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//安装内存</span></span><br><span class="line">        builder.BUILD_MEMORY();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//完事-出厂</span></span><br><span class="line">        builder.GetComputer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，演示一下整体流程</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//小明进店，发现老板不在店，叫来老板(实例化)</span></span><br><span class="line">        Bosss bosss = <span class="keyword">new</span> Bosss();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//老板介绍有产品A 和 产品B，分别对应不同的配置。问小明要哪个？</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//小明说小孩子才做选择题，成年人选择都要，然后老板然后去组装（生产）</span></span><br><span class="line">        bosss.Construct(<span class="keyword">new</span> ProductA());</span><br><span class="line">        bosss.Construct(<span class="keyword">new</span> ProductB());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//独立性,扩展性,需要扩展了就直接添加一个品种就行</span></span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">将一个复杂对象的构建与他的表示分离出来，使得同样的构建过程构建不同的对象。</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>ApiFox参数配置</title>
    <link href="http://example.com/2022/04/28/APIFox-%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/04/28/APIFox-%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/</id>
    <published>2022-04-28T05:58:31.000Z</published>
    <updated>2022-04-28T06:25:03.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ApiFox-参数配置"><a href="#ApiFox-参数配置" class="headerlink" title="ApiFox 参数配置"></a>ApiFox 参数配置</h1><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204281421221.png" alt="ApiFox"></p><h2 id="设置全局参数"><a href="#设置全局参数" class="headerlink" title="设置全局参数"></a>设置全局参数</h2><p>出于<code>JWT</code>权限验证，需要获取<code>token</code>才能访问。否则就是如下情况。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204281421319.png" alt="401 Unauthoized"></p><p>先设置全局参数 <code>Authorizatior</code> 默认值 <code>bearer &#123;&#123;token&#125;&#125;</code></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204281421550.png" alt="设置全局参数"></p><p>在获取<code>token</code>的接口处，常规添加<code>Params</code>，主要是看<strong>后置操作</strong></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204281421954.png" alt="后置操作"></p><p>以下是添加完的。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204281421334.png" alt="添加公共脚本"></p><p>添加公共脚本</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204281422732.png" alt="公共脚本"></p><p>输入公共脚本内容</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204281422599.png" alt="公共脚本内容"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//核心</span></span><br><span class="line">pm.<span class="title function_">test</span>(<span class="string">&quot;Status code is 200&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    pm.<span class="property">response</span>.<span class="property">to</span>.<span class="property">have</span>.<span class="title function_">status</span>(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 把responseBody转为json字符串</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(responseBody);</span><br><span class="line"><span class="comment">// 设置环境变量token，供后面的接口引用，位置就是上一步获取的位置</span></span><br><span class="line">pm.<span class="property">globals</span>.<span class="title function_">set</span>(<span class="string">&quot;token&quot;</span>, data.<span class="property">result</span>.<span class="property">AccessToken</span>);</span><br></pre></td></tr></table></figure><p>以上，在执行完登录接口后，公共脚本会把<code>token</code>信息赋值给全局变量<code>Authorization</code>,其他接口就可以直接使用<code>token</code>了。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204281422625.png" alt="使用全局参数"></p>]]></content>
    
    
    <summary type="html">接口神器</summary>
    
    
    
    
    <category term="Api" scheme="http://example.com/tags/Api/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号网站调试</title>
    <link href="http://example.com/2022/04/01/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%BD%91%E7%AB%99%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/04/01/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%BD%91%E7%AB%99%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/</id>
    <published>2022-04-01T01:50:33.000Z</published>
    <updated>2022-04-01T02:51:09.791Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="微信公众号网站调试"><a href="#微信公众号网站调试" class="headerlink" title="微信公众号网站调试"></a>微信公众号网站调试</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>基于 <code>Microsoft Visual Studio 2019</code> 开发的<code>MVC</code> 作为微信公众号的后台，</p><p>由于微信公众号的限制，需要在后台设置业务域名进行安全验证。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310915539.png" alt="image-20220328151830858"></p><p>还有就是  <code>Microsoft Visual Studio 2019</code> 在开发的同时，是启用<code>IIS Express</code>  或者 <code>本地IIS</code>。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310915421.png" alt="image-20220328152024665"></p><p>综述上面两点，导致开发人员在项目调试的时候，没有以往那般丝滑。</p><h2 id="NATAPP"><a href="#NATAPP" class="headerlink" title="NATAPP"></a><code>NATAPP</code></h2><p>经朋友介绍，引入  <a href="https://natapp.cn/">NATAPP-内网穿透 基于ngrok的国内高速内网映射工具</a></p><p>大概分几步：</p><ol><li><p>注册，认证，这无需多言。</p></li><li><p>购买隧道，这里我买的是免费的，经费充裕尽量买收费的，这样域名不会变来变去。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310915731.png" alt="image-20220328152411264"></p></li><li><p>下载客户端，我这是 <code>windows 64</code></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204011050571.png" alt="image-20220328152651312"></p></li><li><p>修改<code>config.ini</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">default</span>]</span><br><span class="line">authtoken=***********</span><br><span class="line">clienttoken=</span><br><span class="line">log=none                        </span><br><span class="line">loglevel=ERROR                  </span><br><span class="line">http_proxy= </span><br></pre></td></tr></table></figure><p>这里的 <code>authtoken</code> 是购买的隧道中的信息</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310915485.png" alt="image-20220328152850308"></p></li><li><p>双击<code>natapp.exe</code>,前提是本地的<code>IIS</code>或者别的宿主好使。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204011050248.png" alt="image-20220328153026831"></p></li></ol><p>至此，内外网穿透完事，得到外网域名和内网端口，但是还没有达到能通过VS可以调试的地步，接着整。</p><h2 id="本地发布"><a href="#本地发布" class="headerlink" title="本地发布"></a>本地发布</h2><p>接下来设置本地</p><ol><li><p>先在VS中把网站发布到本地的文件夹里，把上面这个<code>MP_verify_***********.TXT</code>，也放到这个地方，不放不行，不放上一步域名添加不了。</p></li><li><p>在<code>IIS</code>添加站点，我这本地是80端口，那就设置80端口的一个站点，站点的主机头就是：之前到手的那个域名，这个时候，基本上就能通过域名访问本地站点</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310915419.png" alt="image-20220328154224740"></p></li></ol><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310915010.png" alt="image-20220328154311358"></p><h2 id="公众号后台设置"><a href="#公众号后台设置" class="headerlink" title="公众号后台设置"></a>公众号后台设置</h2><p>设置微信公众号设置-功能设置，添加各种，由于之前有域名，那就添加刚到手的这个域名。添加的时候回提醒下载个<code>MP_verify_***********.TXT</code>文件放到本地，介时下载下来先备用。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310915087.png" alt="image-20220328154628975"></p><h2 id="设置项目属性"><a href="#设置项目属性" class="headerlink" title="设置项目属性"></a>设置项目属性</h2><p>指向刚才发布的那个站点。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310915884.png" alt="image-20220328154940226"></p><p>这个时候，在调试的时候，就是以这个域名启动调试。</p><h2 id="微信开发者工具"><a href="#微信开发者工具" class="headerlink" title="微信开发者工具"></a>微信开发者工具</h2><p>最最最后，再来一个工具，微信开发者工具</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310916458.png" alt="image-20220328155132195"></p><p>是为了当验证用户的时候，不用弹出</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310916145.png" alt="image-20220328155311767"></p><p>至此，准备工作都完成了</p><h2 id="修改HOST"><a href="#修改HOST" class="headerlink" title="修改HOST"></a>修改HOST</h2><p><code>C:\Windows\System32\drivers\etc</code></p><p>最后添加 <code>127.0.0.1</code>  域名</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310916713.png" alt="image-20220328161612732"></p><h2 id="调试顺序"><a href="#调试顺序" class="headerlink" title="调试顺序"></a>调试顺序</h2><ol><li>VS 启动调试，断点啥的该打打上。</li><li>微信开发工具 地址栏填写您要请求的页面地址。</li><li>进断点，为所欲为。</li><li>开发者工具可以调试前端代码。</li></ol>]]></content>
    
    
    <summary type="html">温故而知新，可以为师矣。</summary>
    
    
    
    <category term="微信公众号" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
    
    <category term="公众号" scheme="http://example.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
    <category term="内网穿透" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Docker for RabbitMq</title>
    <link href="http://example.com/2022/03/19/Docker-for-RabbitMq/"/>
    <id>http://example.com/2022/03/19/Docker-for-RabbitMq/</id>
    <published>2022-03-19T12:00:52.000Z</published>
    <updated>2022-04-25T05:41:48.472Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker-for-RabbitMQ"><a href="#Docker-for-RabbitMQ" class="headerlink" title="Docker for RabbitMQ"></a>Docker for RabbitMQ</h1><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204251340905.jpeg" alt="rabbitmqlogo"></p><h2 id="run"><a href="#run" class="headerlink" title="run"></a>run</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit --name Myrabbitmq -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 rabbitmq:management</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-d                          #后台运行</span><br><span class="line">-- homename fuyi-rabbit     #主机名</span><br><span class="line">RABBITMQ_DEFAULT_USER=admin #可视化界面登录用户名</span><br><span class="line">RABBITMQ_DEFAULT_PASS=admin #可视化界面登录密码</span><br><span class="line">-p 15672:15672              #端口映射</span><br><span class="line">c20                         #镜像ID</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Docker 安装 RabbitMQ</summary>
    
    
    
    <category term="RabbitMq" scheme="http://example.com/categories/RabbitMq/"/>
    
    
    <category term="Docke" scheme="http://example.com/tags/Docke/"/>
    
  </entry>
  
  <entry>
    <title>Office Tools 安装部署Office</title>
    <link href="http://example.com/2022/03/12/Office%20Tools%20%E5%AE%89%E8%A3%85%E8%80%81%E4%B8%89%E4%BB%B6%E5%92%8CVisio/"/>
    <id>http://example.com/2022/03/12/Office%20Tools%20%E5%AE%89%E8%A3%85%E8%80%81%E4%B8%89%E4%BB%B6%E5%92%8CVisio/</id>
    <published>2022-03-11T16:07:20.000Z</published>
    <updated>2022-03-31T01:47:44.874Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/Snipaste_2022-03-18_21-16-56.png"></p><h1 id="Office-Tools"><a href="#Office-Tools" class="headerlink" title="Office Tools"></a>Office Tools</h1><p>官网</p><p><a href="https://otp.landian.vip/zh-cn/">Office Tool Plus 官方网站 - 一键部署 Office (landian.vip)</a></p><p>选择产品</p><p>我这是安装完的，之前的忘记截图了。我选择了Office 专业增强版 2019 和 Visio 专业版 2019</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220312000401414.png" alt="选择"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220311235809244.png" alt="安装中"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220311235930667.png" alt="关闭防护"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220312000022460.png" alt="激活"></p><p>最后记得MKS激活一发即可。</p>]]></content>
    
    
    <summary type="html">Office Tools 安装部署 老三件和Visio</summary>
    
    
    
    <category term="StorageBox" scheme="http://example.com/categories/StorageBox/"/>
    
    
    <category term="Program" scheme="http://example.com/tags/Program/"/>
    
  </entry>
  
  <entry>
    <title>DotNet &amp; DotNet Core 区别</title>
    <link href="http://example.com/2022/02/12/dotnet-dotnetcore%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2022/02/12/dotnet-dotnetcore%E5%8C%BA%E5%88%AB/</id>
    <published>2022-02-12T09:25:29.000Z</published>
    <updated>2022-03-31T01:47:44.876Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="DotNet-与-DotNet-Core-的区别"><a href="#DotNet-与-DotNet-Core-的区别" class="headerlink" title="DotNet 与 DotNet Core 的区别"></a>DotNet 与 DotNet Core 的区别</h1><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220212182101257.png" alt="image-20220212182101257"></p><p><strong>DotNet 包含 DotNet Core</strong> </p><p><strong>DotNet</strong> 内有 <strong>DotNet Framework</strong> 、<strong>DotNet Core</strong> 、<strong>Xamarin</strong></p><p><strong>DotNet Framework</strong> 支持Windows和Web应用程序。今天，您可以使用Windows窗体，WPF和UWP在.NET Framework中构建Windows应用程序。ASP.NET MVC用于在.NET Framework中构建Web应用程序。</p><p><strong>DotNet Core</strong> 是一种新的开源和跨平台框架，用于为包括Windows，Mac和Linux在内的所有操作系统构建应用程序。.NET Core仅支持UWP和ASP.NET Core。UWP用于构建Windows 10目标Windows和移动应用程序。ASP.NET Core用于构建基于浏览器的Web应用程序。 </p><p><strong>Xamarin</strong> 无庸置疑，当您想使用C#构建移动（iOS，Android和Windows Mobile）应用程序时，Xamarin是您唯一的选择。</p><p><strong>DotNet Standard</strong>  是一套官方定义的API规范，DotNet Framework 和 DotNet Core 都实现了这套规范。</p><table><thead><tr><th></th><th>DotNet Framework</th><th>DotNet Core</th></tr></thead><tbody><tr><td>跨平台</td><td>windows</td><td>windows、Linux、Mac</td></tr><tr><td>微服务</td><td>基于对Docker的支持，不建议</td><td>支持，有些中间件天然支持Core</td></tr><tr><td>容器化</td><td>可以，但笨重</td><td>轻</td></tr><tr><td>多版本并行</td><td>net 4.0 支持并行了也只是和3.5</td><td>全版本并行</td></tr><tr><td>高性能可扩展</td><td>一般</td><td>天然支持</td></tr><tr><td>开源</td><td>否</td><td>是</td></tr></tbody></table><p>再结合下图</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220212182623858.png" alt="族谱"></p><h2 id="NET-Core和ASP-NET-Core区别"><a href="#NET-Core和ASP-NET-Core区别" class="headerlink" title=".NET Core和ASP.NET Core区别"></a><strong>.NET Core和ASP.NET Core区别</strong></h2><ol><li><p>.NET Core是运行时。它可以执行为其构建的应用程序。ASP.NET Core是构成一个用于构建Web应用程序的框架的库的集合。ASP.NET Core库可以在.NET Core和“完整.NET Framework”（Windows附带许多年）上使用。</p></li><li><p>使用.NET Core的 ASP.NET CORE-所有依赖项都是自包含的，可以使用大多数Nuget包，不能使用Windows特定的包，可以在Windows，Linux，Mac上执行</p></li><li><p>使用.NET Framework的 ASP.NET CORE-大多数依赖项都是自包含的，仅在Windows上执行，将有权访问Windows特定的Nuget软件包，需要在计算机上安装有针对性的.NET Framework版本</p></li></ol><h2 id="ASP-NET-Core-NET-Core-and-ASP-NET-Core-NET-Framework-区别"><a href="#ASP-NET-Core-NET-Core-and-ASP-NET-Core-NET-Framework-区别" class="headerlink" title="ASP.NET Core (.NET Core) and ASP.NET Core (.NET Framework)区别"></a><strong>ASP.NET Core (.NET Core) and ASP.NET Core (.NET Framework)区别</strong></h2><p><strong>ASP.NET Core (.NET Core)</strong></p><blockquote><p>使用.Net Core运行时的ASP.NET Core可以支持跨平台(Windows, Mac, and Linux (包括Docker)),服务器不需要安装.Net Core，它的依赖与应用程序捆绑在一起。而且它是高性能的开源的框架。它能够在您自己的进程中托管IIS，Nginx，Apache，Docker或自托管。ASP.NET Core完全作为NuGet包发布。这允许您优化您的应用程序，使其仅包含必要的NuGet包。实际上，面向.NET Core的ASP.NET Core 2.x应用程序只需要一个NuGet包。应用程序表面积较小的好处，可以有更严格的安全性，更少的服务和更高的性能。可以使用 Kestrel web server。可以使用Visual Studio Code写代码。它现在还不支持Aspx, WPF, WCF and WebServices。它内置依赖注入的支持。可以使用coreclr，它是带有.net core的asp.net核心的运行时。</p></blockquote><p><strong>ASP.NET Core (.NET Framework)</strong></p><blockquote><p>使用.NET Framework运行时的ASP.NET Core可以支持桌面应用，也可以说是完整版。但这些应用程序只能在Windows上运行，但有关ASP.NET Core的其他所有内容的行为方式都相同。另一方面，.Net框架在2005年之前就开始了，它不断添加新功能，使其成为一个复杂的框架和更重的框架。它不是跨平台的。它支持Aspx，WPF，WCF和WebServices。</p></blockquote><p>参考资料</p><ol><li><a href="https://www.cjavapy.com/article/73/">ASP.NET Core (.NET Core) and ASP.NET Core (.NET Framework)区别-CJavaPy</a></li><li><a href="https://blog.csdn.net/qq_21209307/article/details/104891873?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&utm_relevant_index=1">.NET Framework， .NET Core 和.NET Standard的区别和联系_Will Wang0715的博客-CSDN博客</a></li></ol>]]></content>
    
    
    <summary type="html">DotNet &amp; DotNet Core 区别</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="Interview" scheme="http://example.com/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Docker+GitLab+Jenkins</title>
    <link href="http://example.com/2022/01/20/jenkins/"/>
    <id>http://example.com/2022/01/20/jenkins/</id>
    <published>2022-01-20T14:47:51.000Z</published>
    <updated>2022-03-31T01:47:44.877Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大概意图：<code>Docker</code>+<code>GitLab</code>+<code>Jenkins</code> 自动部署 <code>Dot Net Core Web Application</code></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220120211456716.png" alt="大概意图"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220120212431735.png" alt="主要容器"></p><h2 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h2><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/cd796745db80288a131fb24d57d12880.jpeg" alt="Gitlab"></p><h3 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce</span><br></pre></td></tr></table></figure><p>或者 导入本地镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; /root/dockerimage/xxxx.tar</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d  -p 443:443 -p 8888:80 -p 222:22 --name gitlab --restart always \</span><br><span class="line">-v /root/gitlab/config:/etc/gitlab \</span><br><span class="line">-v /root/gitlab/logs:/var/log/gitlab \</span><br><span class="line">-v /root/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce</span><br></pre></td></tr></table></figure><h3 id="添加秘钥"><a href="#添加秘钥" class="headerlink" title="添加秘钥"></a>添加秘钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#x27;xxx@xxx.com&#x27;</span><br></pre></td></tr></table></figure><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220120225149050.png" alt="Jenkins"></p><h3 id="Windows-安装"><a href="#Windows-安装" class="headerlink" title="Windows 安装"></a>Windows 安装</h3><h4 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h4><p>安装 JDK 1.8 <code>jdk-8u321-windows-x64.exe</code> </p><p>安装完成之后设置环境变量</p><h4 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h4><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220125134818266.png" alt="image-20220125134818266"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220125134838645.png" alt="image-20220125134838645"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_321</span><br><span class="line"></span><br><span class="line">CLASSPATH</span><br><span class="line">%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</span><br></pre></td></tr></table></figure><h4 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h4><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220125135007369.png" alt="image-20220125135007369"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220125135030637.png" alt="image-20220125135030637"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Path</span><br><span class="line">%JAVA_HOME%\bin\</span><br><span class="line">%JAVA_HOME%\jre\bin\</span><br></pre></td></tr></table></figure><h4 id="下载-war"><a href="#下载-war" class="headerlink" title="下载 war"></a>下载 war</h4><p><code>jenkins.war</code>:下载 <a href="https://mirrors.huaweicloud.com/jenkins/war/2.269/">https://mirrors.huaweicloud.com/jenkins/war/2.269/</a> </p><h4 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h4><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220125135345995.png" alt="image-20220125135345995"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:\jenkins</span><br><span class="line">java -jar jenkins.war</span><br></pre></td></tr></table></figure><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220125135452362.png" alt="image-20220125135452362"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220125135709149.png" alt="image-20220125135709149"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220125135728614.png" alt="image-20220125135728614"></p><h3 id="Linux-安装"><a href="#Linux-安装" class="headerlink" title="Linux 安装"></a>Linux 安装</h3><h4 id="镜像下载-1"><a href="#镜像下载-1" class="headerlink" title="镜像下载"></a>镜像下载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkins/jenkins</span><br></pre></td></tr></table></figure><h4 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -u root -d -p 8080:8080 -p 50000:50000 -v /root/jenkins_data/DockerData:/var/jenkins_home -v /root/jenkins_data/docker.sock:/var/run/docker.sock jenkins/jenkins --restart always</span><br></pre></td></tr></table></figure><h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><blockquote><p> Please wait while Jenkins is getting ready to work …</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开</span></span><br><span class="line">hudson.model.UpdateCenter.xml   #这个就是挂载的root/jenkins_data/Dockerdata里</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把</span></span><br><span class="line">http://updates.jenkins-io/update-center.json</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改成 清华大学镜像地址</span></span><br><span class="line">http://mirror.xmission.com/jenkins/updates/update-center.json</span><br></pre></td></tr></table></figure><h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><blockquote><p>容器内执行<code>apt-get update</code> 总超时，需要添加源</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将容器内的配置文件导出来</span></span><br><span class="line">docker cp elegant_neumann:&quot;/etc/apt/sources.list&quot; /root/jenkins_config/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将修改好的配置文件覆盖到容器中</span></span><br><span class="line">docker cp &quot;/root/jenkins_config/sources.list&quot; elegant_neumann:&quot;/etc/apt/sources.list&quot;</span><br></pre></td></tr></table></figure><h4 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h4><blockquote><p>更新源后会报错：<code>NO_PUBKEY 40976EAF437D05B5 NO_PUBKEY 3B4FE6ACC0B21F32</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 40976EAF437D05B5 3B4FE6ACC0B21F32</span><br></pre></td></tr></table></figure><p>然后添加ping <code>apt install iputils-ping</code></p><h4 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h4><blockquote><p>因为要在<code>Jenkins</code>中运行 <code>DotNet 5.0 Web</code>，所以需要在<code>Jenkins</code>容器内有 <code>dotnet 5.0 SDK</code>,这个问题会体现在构建的时候。</p><p>这涉及到通过<code>Dockerfile</code> 创建镜像，这里需要创建一个携带<code>dotnet5.0 SDK</code>的<code>jenkins</code>镜像</p></blockquote><p>参考地址：<a href="https://blog.csdn.net/feng005211/article/details/114818504">.NET 5 + Docker Jenkins，做自动化部署，全Docker环境</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">封装Jenkins镜像（带有dotnet环境的） sdk=5.1</span></span><br><span class="line">FROM jenkins/jenkins:lts</span><br><span class="line">USER root</span><br><span class="line">WORKDIR /dotnet</span><br><span class="line">RUN wget -O dotnet.tar.gz https://download.visualstudio.microsoft.com/download/pr/820db713-c9a5-466e-b72a-16f2f5ed00e2/628aa2a75f6aa270e77f4a83b3742fb8/dotnet-sdk-5.0.100-linux-x64.tar.gz</span><br><span class="line">RUN tar zxf dotnet.tar.gz -C ./</span><br><span class="line">RUN rm -rf dotnet.tar.gz</span><br><span class="line">ENV PATH=&quot;$&#123;PATH&#125;:/dotnet:/var/jenkins_home/.dotnet/tools&quot;</span><br><span class="line">ENV DOTNET_ROOT=&quot;/dotnet&quot;</span><br><span class="line">RUN apt update -y</span><br><span class="line">RUN apt install icu-devtools vim zip unzip -y</span><br><span class="line">RUN usermod -a -G root jenkins</span><br><span class="line">USER jenkins</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">命令解释</span><br><span class="line">1.这个Docker镜像基于jenkins</span><br><span class="line">2.设置当前用户为root，因为后面安装需要使用root</span><br><span class="line">3.设置当前工作目录为dotnet</span><br><span class="line">4.下载dotnet SDK包，保存为dotnet.tar.gz。这里要注意下载正确版本的SDK，可前往微软官方网站获取下载链接：https://dotnet.microsoft.com/download</span><br><span class="line">5.解压dotnet SDK到当前目录，即/dotnet目录</span><br><span class="line">6.删除dotnet SDK包</span><br><span class="line">7.把dotnet目录和dotnet tools目录添加到环境变量PATH，这样就可以使用dotnet命令了</span><br><span class="line">8.设置DOTNET_ROOT变量</span><br><span class="line">9.更新源</span><br><span class="line">10.安装一些必需的，常用的工具包，其中icu-devtools是运行dotnet需要的</span><br><span class="line">11.修改jenkins用户到root附加组</span><br><span class="line">12.设置当前用户为jenkins</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">构建镜像 name=jenkins:dotnet</span><br><span class="line">docker build -t jenkins:dotnet .</span><br><span class="line">很简单的将包含dotnet环境的jenkins安装好了</span><br></pre></td></tr></table></figure><h4 id="问题5"><a href="#问题5" class="headerlink" title="问题5"></a>问题5</h4><blockquote><p>容器内想安装别的就会用到 wget</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get update  </span><br><span class="line">apt-get install wget  </span><br><span class="line">wget --version  </span><br></pre></td></tr></table></figure><h4 id="问题6"><a href="#问题6" class="headerlink" title="问题6"></a>问题6</h4><blockquote><p>构建携带dotnet 5环境的Jenkins镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">封装Jenkins镜像（带有dotnet环境的） sdk=5.1</span></span><br><span class="line">FROM jenkins/jenkins:latest</span><br><span class="line">USER root</span><br><span class="line">WORKDIR /dotnet</span><br><span class="line">RUN echo &quot;deb http://mirrors.aliyun.com/debian/ buster main non-free contrib\n\</span><br><span class="line">deb http://mirrors.aliyun.com/debian-security buster/updates main\n\</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib\n\</span><br><span class="line">deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib\n\</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian-security buster/updates main\n\</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib\n\</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib\n\</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib&quot; &gt; /etc/apt/sources.list</span><br><span class="line">RUN apt-get update --fix-missing &amp;&amp; apt-get install -y wget --fix-missing</span><br><span class="line">RUN wget -O dotnet.tar.gz https://download.visualstudio.microsoft.com/download/pr/820db713-c9a5-466e-b72a-16f2f5ed00e2/628aa2a75f6aa270e77f4a83b3742fb8/dotnet-sdk-5.0.100-linux-x64.tar.gz</span><br><span class="line">RUN tar zxf dotnet.tar.gz -C ./</span><br><span class="line">RUN rm -rf dotnet.tar.gz</span><br><span class="line">ENV PATH=&quot;$&#123;PATH&#125;:/dotnet:/var/jenkins_home/.dotnet/tools&quot;</span><br><span class="line">ENV DOTNET_ROOT=&quot;/dotnet&quot;</span><br><span class="line">RUN apt update -y</span><br><span class="line">RUN apt install icu-devtools vim zip unzip -y</span><br><span class="line">RUN usermod -a -G root jenkins</span><br><span class="line">USER jenkins</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name dotnetjenkins  --restart always -u root -d -p 8080:8080 -p 50000:50000 -v /root/jenkins_data/DockerData:/var/jenkins_home -v /root/jenkins_data/docker.sock:/var/run/docker.sock jenkins:dotnet</span><br></pre></td></tr></table></figure><h2 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h2><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220127143255440.png" alt="image-20220127143255440"></p><p>私有仓库服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry:2.7.1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">   -p 5001:5000 \</span><br><span class="line">   --restart=always \</span><br><span class="line">   --name registry \</span><br><span class="line">   -v /root/data/docker-registry:/var/lib/registry \</span><br><span class="line">   registry:2.7.1</span><br></pre></td></tr></table></figure><p>访问： <a href="http://192.168.137.5:5001/v2/">http://192.168.137.5:5001/v2/</a></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220126205651174.png" alt="image-20220126205651174"></p><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将hello-world 重新复制命名为 192.168.137.5:5001/hello-world</span></span><br><span class="line">docker tag hello-world 192.168.137.5:5001/hello-world</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行 docker push 192.168.137.5:5001/hello-world 就会提交到私有仓库</span></span><br></pre></td></tr></table></figure><h3 id="问题1-1"><a href="#问题1-1" class="headerlink" title="问题1"></a>问题1</h3><blockquote><p><code>Get &quot;https://192.168.137.5:5001/v2/&quot;: http: server gave HTTP response to HTTPS client</code></p></blockquote><p>此问题的原因是由于 Docker自从<code>1.3.X</code>之后docker registry交互默认使用的是<code>HTTPS</code>，但是搭建私有镜像默认使用的是<code>HTTP</code>服务，所以与私有镜像交时出现以上错误。</p><p>想要解决此问题，执行了两个方案，执行到第二种方才好使</p><p>第一种：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加 <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;192.168.137.5:5001&quot;</span>]</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;192.168.137.5:5001&quot;],&quot;registry-mirrors&quot;: [&quot;https://i6*****.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启 daemom</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启docker服务</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启容器</span></span><br><span class="line">docker start $(docker ps -aq)</span><br></pre></td></tr></table></figure><p>第二种：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220126214929695.png" alt="image-20220126214929695"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在ExecStart 这行后面添加 --insecure-registry 192.168.137.5:5001  也就是在Docker启动的时候添加参数</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启 daemom</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启docker服务</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启容器</span></span><br><span class="line">docker start $(docker ps -aq)</span><br></pre></td></tr></table></figure><p>问题解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@microservicevm:~# curl -XGET http://192.168.137.5:5001/v2/_catalog</span><br><span class="line">&#123;&quot;repositories&quot;:[]&#125;</span><br><span class="line"></span><br><span class="line">root@microservicevm:/# docker push 192.168.137.5:5001/hello-world</span><br><span class="line">Using default tag: latest</span><br><span class="line">The push refers to repository [192.168.137.5:5001/hello-world]</span><br><span class="line">e07ee1baac5f: Pushed </span><br><span class="line">latest: digest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4 size: 525</span><br><span class="line"></span><br><span class="line">root@microservicevm:/# curl -XGET http://192.168.137.5:5001/v2/_catalog</span><br><span class="line">&#123;&quot;repositories&quot;:[&quot;hello-world&quot;]&#125;</span><br></pre></td></tr></table></figure><h2 id="Harbor"><a href="#Harbor" class="headerlink" title="Harbor"></a>Harbor</h2><h2 id="Net-5-GitLab-Jenkins"><a href="#Net-5-GitLab-Jenkins" class="headerlink" title="Net 5 + GitLab + Jenkins"></a>Net 5 + GitLab + Jenkins</h2><h3 id="Net-5"><a href="#Net-5" class="headerlink" title="Net 5"></a>Net 5</h3><p>根据此处的<a href="#%E9%97%AE%E9%A2%986">Dockerfile</a>，创建携带.net 5.0 环境的<code>Jenkins</code>容器</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203204439495.png" alt="创建"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203204544944.png" alt="配置"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203204632628.png" alt="net5.0"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203204732348.png" alt="测试代码"></p><h3 id="Jenkins-1"><a href="#Jenkins-1" class="headerlink" title="Jenkins"></a>Jenkins</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203211820516.png" alt="系统管理-系统配置"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203211538155.png" alt="配置GitLab账号信息"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203205927175.png" alt="源码管理"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203210045375.png" alt="构建触发器"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203210232801.png" alt="点击高级获取Secret token"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203210446489.png" alt="构建"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203212831776.png" alt="设置凭证"></p><h3 id="GitLab-1"><a href="#GitLab-1" class="headerlink" title="GitLab"></a>GitLab</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203204909533.png" alt="将测试代码上传到Gitlab"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203211043489.png" alt="webhooks 设置网址和令牌"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203213909943.png" alt="GitPush-构建"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203230849200.png" alt="控制台信息"></p>]]></content>
    
    
    <summary type="html">Docker+GitLab+Jenkins 自动部署 DotNet Core Application</summary>
    
    
    
    <category term="MicroService" scheme="http://example.com/categories/MicroService/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term=".net core" scheme="http://example.com/tags/net-core/"/>
    
    <category term="jenkins" scheme="http://example.com/tags/jenkins/"/>
    
    <category term="GitLab" scheme="http://example.com/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>Docker Compose</title>
    <link href="http://example.com/2022/01/19/DockerCompose/"/>
    <id>http://example.com/2022/01/19/DockerCompose/</id>
    <published>2022-01-19T08:46:15.000Z</published>
    <updated>2022-03-31T01:47:44.871Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119155234027.png" alt="image-20220119155234027"></p><h2 id="why-docker-compose"><a href="#why-docker-compose" class="headerlink" title="why docker compose"></a>why docker compose</h2><p>​        操作Docker的时候</p><p>​        如果只是操作单例服务的话，用docker命令操作:<code>build</code>、<code>run</code> 等等就能满足。</p><p>​        但是在操作一整套服务的时候，涉及到的容器操作就会巨多，运行多个微服务实例再加多个Consul做集群，然后再加上<code>Oracle</code>、<code>redis</code>、<code>Rabbitmq</code>等等，就会捉襟见肘。</p><p>​        所以需要<code>Docker compose</code>帮助做容器编排。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Docker for windows 自带此功能</p><p>Linux 下：</p><p>从 Github 上下载它的二进制包来使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>网速慢,可以用daocloud下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>创建软链</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@vm02:~/webdemo# docker-compose --version</span><br><span class="line">docker-compose version 1.25.1, build a82fef07</span><br></pre></td></tr></table></figure><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动项目</span></span><br><span class="line">docker-compose up</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动（后台运行）</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止项目</span></span><br><span class="line">docker-compose down </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">项目日志</span></span><br><span class="line">docker-compose logs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看项目中的容器列表</span></span><br><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>通过<code>docker-compose</code> 启动 web 应用，同时使用<code>Nginx</code>反向代理。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119161032986.png" alt="DockerCompose"></p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><ol><li>将发布好的web应用文件放到服务器上。</li></ol><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119161132040.png" alt="服务器web应用位置"></p><ol start="2"><li><p>在服务器应用文件夹位置添加俩文件：<code>docker-compose.yml</code> 和 <code>proxy.conf</code></p><p><code>docker-compose.yml</code> 是 <code>docker-compose</code>的默认配置文件。</p><p><code>proxy.conf</code> 是要给<code>nginx</code>挂载的配置文件，回头可以放别的地方。</p></li></ol><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119161212330.png" alt="添加配置文件"></p><ol start="3"><li><p><code>docker-compose.yml</code></p><p><code>Docker-compose 配合文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">webdemo:</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">webdemo.compose</span></span><br><span class="line">        <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">        <span class="attr">ports:</span> </span><br><span class="line">         <span class="bullet">-</span> <span class="string">&quot;8081:80&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">reverse-proxy:</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">nginxdemo</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">&quot;8082:80&quot;</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">./proxy.conf:/etc/nginx/conf.d/default.conf</span></span><br></pre></td></tr></table></figure><p>释义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;2&#x27;</span><br><span class="line">services:</span><br><span class="line">    webdemo:</span><br><span class="line">        container_name: webdemo.compose # 容器名称</span><br><span class="line">        build: . # build 当前文件夹</span><br><span class="line">        ports: </span><br><span class="line">         - &quot;8081:80&quot; # 端口映射</span><br><span class="line"></span><br><span class="line">    reverse-proxy:</span><br><span class="line">        container_name: nginxdemo # 容器名称</span><br><span class="line">        image: nginx # 镜像名称</span><br><span class="line">        ports:</span><br><span class="line">         - &quot;8082:80&quot; # 端口映射</span><br><span class="line">        volumes:</span><br><span class="line">         - ./proxy.conf:/etc/nginx/conf.d/default.conf # 文件映射</span><br></pre></td></tr></table></figure></li><li><p><code>proxy.conf</code></p><p><code>Nginx 配置</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http:<span class="comment">//192.168.137.6:8081;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释义：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen <span class="number">80</span>; <span class="comment">//监听端口</span></span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http:<span class="comment">//192.168.137.6:8081; //跳转url</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p><code>docker-compose up -d</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@vm02:~/webdemo# docker-compose up -d</span><br><span class="line">Creating network &quot;webdemo_default&quot; with the default driver</span><br><span class="line">Creating webdemo.compose ... done</span><br><span class="line">Creating nginxdemo       ... done</span><br></pre></td></tr></table></figure><h4 id="启动日志"><a href="#启动日志" class="headerlink" title="启动日志"></a>启动日志</h4><p><code>docker-compose logs</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">root@vm02:~/webdemo# docker-compose logs</span><br><span class="line">Attaching to nginxdemo, webdemo.compose</span><br><span class="line">nginxdemo        | /docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration</span><br><span class="line">nginxdemo        | /docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/</span><br><span class="line">nginxdemo        | /docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh</span><br><span class="line">nginxdemo        | 10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf</span><br><span class="line">nginxdemo        | 10-listen-on-ipv6-by-default.sh: info: /etc/nginx/conf.d/default.conf differs from the packaged version</span><br><span class="line">nginxdemo        | /docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh</span><br><span class="line">nginxdemo        | /docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh</span><br><span class="line">nginxdemo        | /docker-entrypoint.sh: Configuration complete; ready for start up</span><br><span class="line">nginxdemo        | 2022/01/19 08:27:00 [notice] 1#1: using the &quot;epoll&quot; event method</span><br><span class="line">nginxdemo        | 2022/01/19 08:27:00 [notice] 1#1: nginx/1.21.5</span><br><span class="line">nginxdemo        | 2022/01/19 08:27:00 [notice] 1#1: built by gcc 10.2.1 20210110 (Debian 10.2.1-6) </span><br><span class="line">nginxdemo        | 2022/01/19 08:27:00 [notice] 1#1: OS: Linux 5.4.0-94-generic</span><br><span class="line">nginxdemo        | 2022/01/19 08:27:00 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576</span><br><span class="line">nginxdemo        | 2022/01/19 08:27:00 [notice] 1#1: start worker processes</span><br><span class="line">nginxdemo        | 2022/01/19 08:27:00 [notice] 1#1: start worker process 30</span><br><span class="line">webdemo.compose  | warn: Microsoft.AspNetCore.DataProtection.Repositories.FileSystemXmlRepository[60]</span><br><span class="line">webdemo.compose  |       Storing keys in a directory &#x27;/root/.aspnet/DataProtection-Keys&#x27; that may not be persisted outside of the container. Protected data will be unavailable when container is destroyed.</span><br><span class="line">webdemo.compose  | warn: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[35]</span><br><span class="line">webdemo.compose  |       No XML encryptor configured. Key &#123;887cc5db-dcb2-4d26-886d-0f3aa1c787c9&#125; may be persisted to storage in unencrypted form.</span><br><span class="line">webdemo.compose  | info: Microsoft.Hosting.Lifetime[0]</span><br><span class="line">webdemo.compose  |       Now listening on: http://[::]:80</span><br><span class="line">webdemo.compose  | info: Microsoft.Hosting.Lifetime[0]</span><br><span class="line">webdemo.compose  |       Application started. Press Ctrl+C to shut down.</span><br><span class="line">webdemo.compose  | info: Microsoft.Hosting.Lifetime[0]</span><br><span class="line">webdemo.compose  |       Hosting environment: Production</span><br><span class="line">webdemo.compose  | info: Microsoft.Hosting.Lifetime[0]</span><br><span class="line">webdemo.compose  |       Content root path: /app</span><br></pre></td></tr></table></figure><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119162936354.png" alt="执行日志"></p><h4 id="容器列表"><a href="#容器列表" class="headerlink" title="容器列表"></a>容器列表</h4><p><code>docker ps</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@vm02:~/webdemo# docker ps</span><br><span class="line">CONTAINER ID   IMAGE             COMMAND                  CREATED              STATUS              PORTS                                   NAMES</span><br><span class="line">0d4ea2075140   nginx             &quot;/docker-entrypoint.…&quot;   About a minute ago   Up About a minute   0.0.0.0:8082-&gt;80/tcp, :::8082-&gt;80/tcp   nginxdemo</span><br><span class="line">686adcb2655a   webdemo_webdemo   &quot;dotnet WebDemo.dll&quot;     About a minute ago   Up About a minute   0.0.0.0:8081-&gt;80/tcp, :::8081-&gt;80/tcp   webdemo.compose</span><br></pre></td></tr></table></figure><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119163032471.png" alt="容器列表"></p><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119163327957.png" alt="运行结果"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>至此，已经完成了通过<code>Docker-compose</code>动态编排容器，实现<code>Nginx</code>反向代理<code>.Net core web 应用程序</code></p><p>随着学习的深入，后续也会渐渐丰满本篇内容。</p>]]></content>
    
    
    <summary type="html">通过Docker Compose 启动.net core web 应用程序并且使用Nginx反向代理</summary>
    
    
    
    <category term="Nginx" scheme="http://example.com/categories/Nginx/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term=".net core" scheme="http://example.com/tags/net-core/"/>
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>net core web + Docker + Nginx</title>
    <link href="http://example.com/2022/01/19/NetCore%20Nginx%20%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>http://example.com/2022/01/19/NetCore%20Nginx%20%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</id>
    <published>2022-01-19T06:23:15.000Z</published>
    <updated>2022-03-31T01:47:44.874Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="NetCore-Docker-Nginx"><a href="#NetCore-Docker-Nginx" class="headerlink" title=".NetCore Docker Nginx"></a>.NetCore Docker Nginx</h1><h2 id="Test-Program"><a href="#Test-Program" class="headerlink" title="Test Program"></a>Test Program</h2><h3 id="新建-net-core-web应用"><a href="#新建-net-core-web应用" class="headerlink" title="新建 .net core web应用"></a>新建 .net core web应用</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119135939441.png" alt="新建应用"></p><h3 id="添加Docker-支持-linux"><a href="#添加Docker-支持-linux" class="headerlink" title="添加Docker 支持-linux"></a>添加Docker 支持-linux</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119140022112.png" alt="docker支持"></p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119140104644.png" alt="发布设置"></p><h3 id="修改发布后的DockerFile"><a href="#修改发布后的DockerFile" class="headerlink" title="修改发布后的DockerFile"></a>修改发布后的DockerFile</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119140144967.png" alt="发布后的文件"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119140208877.png" alt="修改DockerFile"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">See https://aka.ms/containerfastmode to understand how Visual Studio uses</span> </span><br><span class="line">FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base</span><br><span class="line">WORKDIR /app</span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY .  /app</span><br><span class="line">ENTRYPOINT [&quot;dotnet&quot;, &quot;WebDemo.dll&quot;]</span><br></pre></td></tr></table></figure><h3 id="上传到服务器"><a href="#上传到服务器" class="headerlink" title="上传到服务器"></a>上传到服务器</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119140355752.png" alt="xftp"></p><h2 id="Docker-image"><a href="#Docker-image" class="headerlink" title="Docker image"></a>Docker image</h2><h3 id="build-test-program"><a href="#build-test-program" class="headerlink" title="build test program"></a>build test program</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119140542103.png" alt="testProgramBuild"></p><h3 id="pull-nginx"><a href="#pull-nginx" class="headerlink" title="pull nginx"></a>pull nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><h2 id="Docker-Run"><a href="#Docker-Run" class="headerlink" title="Docker Run"></a>Docker Run</h2><h3 id="run-test-program-image"><a href="#run-test-program-image" class="headerlink" title="run test program image"></a>run test program image</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:80 --name webdemo.nginx webdemo:v1.0</span><br></pre></td></tr></table></figure><h3 id="添加Nginx配置"><a href="#添加Nginx配置" class="headerlink" title="添加Nginx配置"></a>添加Nginx配置</h3><p><code>myNginx.conf</code>,<code>192.168.137.6</code>为宿主IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /root/nginx/my_nginx.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内容</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://192.168.137.6:5000;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="run-nignx-image"><a href="#run-nignx-image" class="headerlink" title="run nignx image"></a>run nignx image</h3><p>挂载到/root/nginx/my_nginx.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 -v /root/nginx/my_nginx.conf:/etc/nginx/conf.d/default.conf nginx</span><br></pre></td></tr></table></figure><h2 id="Last"><a href="#Last" class="headerlink" title="Last"></a>Last</h2><p>本篇主要是将.Net core web应用放到Linux服务器中，使用Nginx反向代理，进行访问。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119142358772.png" alt="docker容器列表"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119142220882.png" alt="web应用服务"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119142258548.png" alt="ngixn代理端口"></p>]]></content>
    
    
    <summary type="html">在Docker中通过Nginx反向代理访问.Net Core web 应用</summary>
    
    
    
    <category term="Nginx" scheme="http://example.com/categories/Nginx/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term=".net core" scheme="http://example.com/tags/net-core/"/>
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
</feed>
