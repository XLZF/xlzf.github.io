<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Harris Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-05T08:05:34.238Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Harris</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式-享元模式</title>
    <link href="http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-05T07:45:16.000Z</published>
    <updated>2022-05-05T08:05:34.238Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式-享元模式"><a href="#设计模式-享元模式" class="headerlink" title="设计模式-享元模式"></a>设计模式-享元模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a><a href="https://www.cnblogs.com/wyy1234/p/10041658.html">概念</a></h2><p>​        <em><code>FlyweightPattern</code></em></p><p>​        在软件开发中我们经常遇到多次使用相似或者相同对象的情况，如果每次使用这个对象都去new一个新的实例会很浪费资源。这时候很多人会想到前边介绍过的一个设计模式：</p><p>​        原型模式，原型模式通过拷贝现有对象来生成一个新的实例，使用拷贝来替代new。原型模式可以很好的解决创建多个相同/相似实例的问题，为什么还要用享元模式呢？</p><p>​        这是因为这两种模式的使用场景是不同的，原型模式侧重于”创建“，我们通过拷贝确确实实的创建了新的实例，它属于创建型设计模式；而享元模式侧重于“重用”，即如果有现有的实例就不去创建了，直接拿来用就行了。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><h3 id="抽象车类"><a href="#抽象车类" class="headerlink" title="抽象车类"></a>抽象车类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Car</span><br>&#123;<br>    <span class="hljs-comment">//开车</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Use</span>(<span class="hljs-params">Driver d</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="具体车类"><a href="#具体车类" class="headerlink" title="具体车类"></a>具体车类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RealCar</span> : <span class="hljs-title">Car</span><br>&#123;<br>    <span class="hljs-comment">//颜色</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Color &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RealCar</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> color</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.Color = color;<br>    &#125;<br>    <span class="hljs-comment">//开车</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Use</span>(<span class="hljs-params">Driver d</span>)</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">$&quot;<span class="hljs-subst">&#123;d.Name&#125;</span>开<span class="hljs-subst">&#123;<span class="hljs-keyword">this</span>.Color&#125;</span>的车&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="车库"><a href="#车库" class="headerlink" title="车库"></a>车库</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 车库</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CarFactory</span><br>&#123;<br>    <span class="hljs-keyword">private</span> Dictionary&lt;<span class="hljs-built_in">string</span>, Car&gt; carPool = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, Car&gt;();<br>    <span class="hljs-comment">//初始的时候，只有红色和绿色两辆汽车</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CarFactory</span>()</span><br>    &#123;<br>        carPool.Add(<span class="hljs-string">&quot;红色&quot;</span>, <span class="hljs-keyword">new</span> RealCar(<span class="hljs-string">&quot;红色&quot;</span>));<br>        carPool.Add(<span class="hljs-string">&quot;绿色&quot;</span>, <span class="hljs-keyword">new</span> RealCar(<span class="hljs-string">&quot;蓝色&quot;</span>));<br>    &#125;<br>    <span class="hljs-comment">//获取汽车</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Car <span class="hljs-title">GetCar</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> key</span>)</span><br>    &#123;<br>        <span class="hljs-comment">//如果车库有就用车库里的车，车库没有就买一个（new一个）</span><br>        <span class="hljs-keyword">if</span> (!carPool.ContainsKey(key))<br>        &#123;<br>            carPool.Add(key, <span class="hljs-keyword">new</span> RealCar(key));<br>            Console.WriteLine(<span class="hljs-string">&quot;没有&#123;0&#125;的车，就买一个&quot;</span>, key);<br>        &#125;<br>        <span class="hljs-keyword">return</span> carPool[key];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="司机类"><a href="#司机类" class="headerlink" title="司机类"></a>司机类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 司机类</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Driver</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Driver</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.Name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>&#123;<br>    CarFactory carFactory = <span class="hljs-keyword">new</span> CarFactory();<br><br>    <span class="hljs-comment">//小头爸爸开蓝色的车</span><br>    Driver d1 = <span class="hljs-keyword">new</span> Driver(<span class="hljs-string">&quot;小头爸爸&quot;</span>);<br>    Car c1 = carFactory.GetCar(<span class="hljs-string">&quot;蓝色&quot;</span>);<br>    c1.Use(d1);<br><br>    <span class="hljs-comment">//扁头妈妈开蓝色的车</span><br>    Driver d2 = <span class="hljs-keyword">new</span> Driver(<span class="hljs-string">&quot;扁头妈妈&quot;</span>);<br>    Car c2 = carFactory.GetCar(<span class="hljs-string">&quot;蓝色&quot;</span>);<br>    c2.Use(d2);<br><br>    <span class="hljs-keyword">if</span> (c1.Equals(c2))<br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;小头爸爸和扁头妈妈开的是同一辆车&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//车库没有白色的车，就new一辆白色的车</span><br>    Driver d3 = <span class="hljs-keyword">new</span> Driver(<span class="hljs-string">&quot;大头儿子&quot;</span>);<br>    Car c3 = carFactory.GetCar(<span class="hljs-string">&quot;白色&quot;</span>);<br>    c3.Use(d3);<br>    Console.ReadKey();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>​        当系统中大量使用某些相同或者相似的对象，这些对象要耗费大量的内存，并且这些对象剔除外部状态后可以通过一个对象来替代，这时可以考虑使用享元模式。在软件系统中享元模式大量用于各种池技术，如数据库连接对象池，字符串缓存池，<code>HttpApplication</code>池等。</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>降低了系统中对象的数量，从而降低了系统中细粒度对象给内存带来的压力。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>需要分离对象的外部状态和内部状态，使用不当会引起线程安全问题，提高了系统的复杂度。</li></ol>]]></content>
    
    
    <summary type="html">都是拿对象来用，享元模式重在重用，原型模式重在拷贝</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-外观模式</title>
    <link href="http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-05T07:23:15.000Z</published>
    <updated>2022-05-05T07:42:02.337Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式-外观模式"><a href="#设计模式-外观模式" class="headerlink" title="设计模式-外观模式"></a>设计模式-外观模式</h1><h2 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h2><blockquote><p>为子系统中的一组接口提供一个一致的界面，用来访问子系统中的一群接口</p></blockquote><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a><a href="https://www.cnblogs.com/tianzhiliang/archive/2011/09/30/2196249.html">举个栗子</a></h2><p>在家里看个电影需要干些啥。把投影仪、功放、屏幕、<code>DVD</code>、灯光 这五个看做五个子系统。</p><ol><li>打开投影仪</li><li>打开功放</li><li>打开屏幕</li><li>打开<code>DVD</code></li><li>打开灯光</li></ol><p>看完了怎么关闭</p><ol><li>关闭投影仪</li><li>关闭功放</li><li>关闭屏幕</li><li>关闭<code>DVD</code></li><li>关闭灯光</li></ol><h2 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span> </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 投影仪 </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span> </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Projector</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OpenProjector</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;打开投影仪&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CloseProjector</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;关闭投影仪&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetWideScreen</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;投影仪状态为宽屏模式&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetStandardScreen</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;投影仪状态为标准模式&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span> </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 功放机 </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span> </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Amplifier</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OpenAmplifier</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;打开功放机&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CloseAmplifier</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;关闭功放机&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span> </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 屏幕 </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span> </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Screen</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OpenScreen</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;打开屏幕&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CloseScreen</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;关闭屏幕&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span> </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> DVD播放器 </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span> </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DVDPlayer</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OpenDVDPlayer</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;打开 DVD 播放器&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CloseDVDPlayer</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;关闭 DVD 播放器&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span> </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 灯光 </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span> </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Light</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OpenLight</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;打开灯光&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CloseLight</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;关闭灯光&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="定义一个外观"><a href="#定义一个外观" class="headerlink" title="定义一个外观"></a>定义一个外观</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span> </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 定义一个外观 </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span> </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MovieFacade</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span> </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 在外观类中必须保存有子系统中各个对象 </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span> </span><br>    <span class="hljs-keyword">private</span> Projector projector;<br>    <span class="hljs-keyword">private</span> Amplifier amplifier;<br>    <span class="hljs-keyword">private</span> Screen screen;<br>    <span class="hljs-keyword">private</span> DVDPlayer dvdPlayer;<br>    <span class="hljs-keyword">private</span> Light light;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MovieFacade</span>()</span><br>    &#123;<br>        projector = <span class="hljs-keyword">new</span> Projector();<br>        amplifier = <span class="hljs-keyword">new</span> Amplifier();<br>        screen = <span class="hljs-keyword">new</span> Screen();<br>        dvdPlayer = <span class="hljs-keyword">new</span> DVDPlayer();<br>        light = <span class="hljs-keyword">new</span> Light();<br>    &#125;<br>    <br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span> </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 打开电影 </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span> </span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OpenMovie</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//先打开投影仪 </span><br>        projector.OpenProjector();<br>        <span class="hljs-comment">//再打开功放 </span><br>        amplifier.OpenAmplifier();<br>        <span class="hljs-comment">//再打开屏幕 </span><br>        screen.OpenScreen();<br>        <span class="hljs-comment">//再打开 DVD </span><br>        dvdPlayer.OpenDVDPlayer();<br>        <span class="hljs-comment">//再打开灯光 </span><br>        light.OpenLight();<br>    &#125;<br>    <br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span> </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 关闭电影 </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span> </span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CloseMovie</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//关闭投影仪 </span><br>        projector.CloseProjector();<br>        <span class="hljs-comment">//关闭功放 </span><br>        amplifier.CloseAmplifier();<br>        <span class="hljs-comment">//关闭屏幕 </span><br>        screen.CloseScreen();<br>        <span class="hljs-comment">//关闭 DVD </span><br>        dvdPlayer.CloseDVDPlayer();<br>        <span class="hljs-comment">//关闭灯光 </span><br>        light.CloseLight();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="看电影"><a href="#看电影" class="headerlink" title="看电影"></a>看电影</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>&#123;<br>    MovieFacade movie = <span class="hljs-keyword">new</span> MovieFacade();<br>    <span class="hljs-comment">//Projector projector = new Projector();</span><br><br>    <span class="hljs-comment">//首先是观看电影 </span><br>    movie.OpenMovie();<br>    Console.WriteLine();<br><br>    <span class="hljs-comment">//然后是将投影仪模式调到宽屏模式 </span><br>    <span class="hljs-comment">//projector.SetWideScreen();</span><br>    <span class="hljs-comment">//再将投影仪模式调回普通模式 </span><br>    <span class="hljs-comment">//projector.SetStandardScreen();</span><br>    <span class="hljs-comment">//Console.WriteLine();</span><br><br>    <span class="hljs-comment">//最后就是关闭电影了 </span><br>    movie.CloseMovie();<br>    Console.ReadKey();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>外观模式对客户端屏蔽了子系统组件，从而简化了接口，减少了客户处理的对象数目并使得子系统的使用更加简单。</li><li>外观模式实现了客户端和子系统之间的松耦合关系，而子系统内部的组件是紧耦合的。松耦合使得子系统的组件变化不会影响到客户端。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>如果新增新的子系统可能需要修改外观类，这就不符合开闭原则，不过这也是没法避免的。</li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>外观模式也叫门面模式。属于<strong>结构型</strong>模式。</p><p>为子系统中的一系列接口提供一个一致的界面，该模式提供了一个高层接口，这个接口使得这一子系统更加容易使用。</p><p>外观模式是通过定义一个外观类将子类包装起来，来简化客户端所调用的方法.</p>]]></content>
    
    
    <summary type="html">为子系统中的一组接口提供一个一致的界面，用来访问子系统中的一群接口。</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-装饰器模式</title>
    <link href="http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-05T06:35:36.000Z</published>
    <updated>2022-05-05T07:01:44.105Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式-装饰器模式"><a href="#设计模式-装饰器模式" class="headerlink" title="设计模式-装饰器模式"></a>设计模式-装饰器模式</h1><h2 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h2><blockquote><p>当我们需要动态添加类的功能同时不改变类的结构时可以使用装饰者模式，装饰类本质是一个现有类的包装。</p></blockquote><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>创建一个人，然后给他穿衣服。</p><h3 id="创建一个人"><a href="#创建一个人" class="headerlink" title="创建一个人"></a>创建一个人</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 人类  具体组件角色</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> : <span class="hljs-title">AbstractPerson</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-comment">//待添加功能的Show方法，具体组件中的Show方法只有原始功能</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span>()</span><br>    &#123;<br>        Console.Write(<span class="hljs-string">$&quot;打扮的人是<span class="hljs-subst">&#123;<span class="hljs-keyword">this</span>.Name&#125;</span>：&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="抽象这个人"><a href="#抽象这个人" class="headerlink" title="抽象这个人"></a>抽象这个人</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 抽象人类  </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AbstractPerson</span><br>&#123;<br>    <span class="hljs-comment">//展示装饰方法,我们使用装饰器模式的目的就是为了扩展这个接口的功能</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="抽象穿衣服方法"><a href="#抽象穿衣服方法" class="headerlink" title="抽象穿衣服方法"></a>抽象穿衣服方法</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//因为我们装饰后的person要直接替换装饰前的person，所以必须继承AbstractPerson</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Finery</span> : <span class="hljs-title">AbstractPerson</span><br>&#123;<br>    <span class="hljs-keyword">protected</span> AbstractPerson person;<br>    <span class="hljs-comment">//设置要打扮的人</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetPerson</span>(<span class="hljs-params">AbstractPerson p</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.person = p;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (person != <span class="hljs-literal">null</span>)<br>        &#123;<br>            person.Show();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="衣服库"><a href="#衣服库" class="headerlink" title="衣服库"></a>衣服库</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//t恤</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TShirt</span> : <span class="hljs-title">Finery</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">base</span>.Show();<br>        Console.Write(<span class="hljs-string">&quot;大t恤  &quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//网鞋</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Sneaker</span> : <span class="hljs-title">Finery</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">base</span>.Show();<br>        Console.Write(<span class="hljs-string">&quot;网鞋  &quot;</span>);<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//西装</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Suit</span> : <span class="hljs-title">Finery</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">base</span>.Show();<br>        Console.Write(<span class="hljs-string">&quot;西装  &quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//领带</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Tie</span> : <span class="hljs-title">Finery</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">base</span>.Show();<br>        Console.Write(<span class="hljs-string">&quot;领带  &quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//皮鞋</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Leather</span> : <span class="hljs-title">Finery</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Show</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">base</span>.Show();<br>        Console.Write(<span class="hljs-string">&quot;皮鞋  &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="穿衣服咯"><a href="#穿衣服咯" class="headerlink" title="穿衣服咯"></a>穿衣服咯</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>&#123;<br>    <span class="hljs-comment">//首先要有打扮的人</span><br>    AbstractPerson xc = <span class="hljs-keyword">new</span> Person() &#123; Name = <span class="hljs-string">&quot;小菜&quot;</span> &#125;;<br><br>    Console.WriteLine(<span class="hljs-string">&quot;第一种装饰-------------------&quot;</span>);<br>    Finery personWithsuit = <span class="hljs-keyword">new</span> Suit();<br>    Finery personWithtie = <span class="hljs-keyword">new</span> Tie();<br>    Finery personWithleather = <span class="hljs-keyword">new</span> Leather();<br>    <span class="hljs-comment">//装饰过程</span><br>    personWithsuit.SetPerson(xc);<span class="hljs-comment">//给小菜穿上西服</span><br>    personWithtie.SetPerson(personWithsuit);<span class="hljs-comment">//给穿上西服的小菜带上领带</span><br>    personWithleather.SetPerson(personWithtie);<span class="hljs-comment">//给穿上西服带上领带的小菜穿上皮鞋</span><br>    personWithleather.Show();<br><br>    Console.WriteLine();<br>    Console.WriteLine(<span class="hljs-string">&quot;第二种装饰-------------------&quot;</span>);<br>    Finery personWithTshirt = <span class="hljs-keyword">new</span> TShirt();<br>    Finery personWithSneaker = <span class="hljs-keyword">new</span> Sneaker();<br>    <span class="hljs-comment">//装饰过程</span><br>    personWithTshirt.SetPerson(xc);<span class="hljs-comment">//给小菜穿上t恤</span><br>    personWithSneaker.SetPerson(personWithTshirt);<span class="hljs-comment">//给穿上t恤的小菜穿上网球鞋</span><br>    personWithSneaker.Show();<br><br>    Console.ReadKey();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp">第一种装饰-------------------<br>打扮的人是小菜：西装  领带  皮鞋<br>第二种装饰-------------------<br>打扮的人是小菜：大t恤  网鞋<br></code></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>一个类需要添加一些功能，而这些功能按数目、顺序组合形成的效果不一样，如果用继承会造成子类过多，装饰者模式可以很好地解决这个问题；</li><li>使用装饰者模式我们可以动态的添加/删除类的功能，灵活性好</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>多层装饰比较复杂，我们需要注意装饰顺序等因素。如先穿内裤再穿裤子，是正常人；而先穿裤子再穿内裤就是超人了。在开发中先过滤字符串再加密，和先加密字符串再过滤的效果是完全不同的。</li></ol>]]></content>
    
    
    <summary type="html">当我们需要动态添加类的功能同时不改变类的结构时可以使用装饰者模式，装饰类本质是一个现有类的包装。</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-组合模式</title>
    <link href="http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-05T06:23:31.000Z</published>
    <updated>2022-05-05T06:33:41.162Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式-组合模式"><a href="#设计模式-组合模式" class="headerlink" title="设计模式-组合模式"></a>设计模式-组合模式</h1><h2 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h2><blockquote><p>在树形结构的处理中模糊了对象和对象组的概念，使用对象和对象组采用了统一的接口，让我们可以像处理简单对象一样处理对象组。</p></blockquote><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>首先得有个树结构，最先想到的就是<code>OA</code>系统里的组织结构。集团总公司、分公司、部门、岗位、人员等等，下面以员工和部门举栗子。</p><h3 id="先抽个象。"><a href="#先抽个象。" class="headerlink" title="先抽个象。"></a>先抽个象。</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 抽象部件 定义了树枝和树叶的公共属性和接口</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Component</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Component</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <br>    <span class="hljs-comment">//添加子节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Add</span>(<span class="hljs-params">Component c</span>)</span>;<br>    <br>    <span class="hljs-comment">//删除子节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Remove</span>(<span class="hljs-params">Component c</span>)</span>;<br>    <br>    <span class="hljs-comment">//展示方法，dept为节点深度</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Display</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> dept</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="树叶子：员工"><a href="#树叶子：员工" class="headerlink" title="树叶子：员工"></a>树叶子：员工</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//具体员工，树形结构的Leaf</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> : <span class="hljs-title">Component</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Employee</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name</span>) : <span class="hljs-title">base</span>(<span class="hljs-params">name</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-comment">//Leaf不能添加/删除子节点所以空实现</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Add</span>(<span class="hljs-params">Component c</span>)</span><br>    &#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Remove</span>(<span class="hljs-params">Component c</span>)</span><br>    &#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Display</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> dept</span>)</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(<span class="hljs-string">&#x27;-&#x27;</span>, dept) + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="树枝：部门"><a href="#树枝：部门" class="headerlink" title="树枝：部门"></a>树枝：部门</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 部门类，相当于树枝</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Depart</span> : <span class="hljs-title">Component</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Depart</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name</span>) : <span class="hljs-title">base</span>(<span class="hljs-params">name</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-comment">//添加子节点</span><br>    <span class="hljs-keyword">public</span> List&lt;Component&gt; children = <span class="hljs-keyword">new</span> List&lt;Component&gt;();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Add</span>(<span class="hljs-params">Component c</span>)</span><br>    &#123;<br>        children.Add(c);<br>    &#125;<br>    <span class="hljs-comment">//删除子节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Remove</span>(<span class="hljs-params">Component c</span>)</span><br>    &#123;<br>        children.Remove(c);<br>    &#125;<br>    <span class="hljs-comment">//展示自己和和内部的所有子节点，这里是组合模式的核心</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Display</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> dept</span>)</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(<span class="hljs-string">&#x27;-&#x27;</span>, dept) + name);<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> children)<br>        &#123;<br>            <span class="hljs-comment">//这里用到了递归的思想</span><br>            item.Display(dept + <span class="hljs-number">4</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最后：攒"><a href="#最后：攒" class="headerlink" title="最后：攒"></a>最后：攒</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>&#123;<br>    Component DepartA = <span class="hljs-keyword">new</span> Depart(<span class="hljs-string">&quot;A总公司&quot;</span>);<br>    Component DepartAX = <span class="hljs-keyword">new</span> Depart(<span class="hljs-string">&quot;AX部门&quot;</span>);<br>    Component DepartAY = <span class="hljs-keyword">new</span> Depart(<span class="hljs-string">&quot;AY部门&quot;</span>);<br>    Component DepartAX1 = <span class="hljs-keyword">new</span> Depart(<span class="hljs-string">&quot;AX1子部门&quot;</span>);<br>    Component DepartAX2 = <span class="hljs-keyword">new</span> Depart(<span class="hljs-string">&quot;AX2子部门&quot;</span>);<br>    Component Ae1 = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">&quot;公司直属员工1&quot;</span>);<br>    Component AXe1 = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">&quot;AX部门员工1&quot;</span>);<br>    Component AX1e1 = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">&quot;AX1部门员工1&quot;</span>);<br>    Component AX1e2 = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">&quot;AX1部门员工2&quot;</span>);<br>    Component AYe1 = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">&quot;AY部门员工1&quot;</span>);<br>    Component AYe2 = <span class="hljs-keyword">new</span> Employee(<span class="hljs-string">&quot;AY部门员工2&quot;</span>);<br>    DepartA.Add(Ae1);<br>    DepartA.Add(DepartAX);<br>    DepartA.Add(DepartAY);<br>    DepartAX.Add(AXe1);<br>    DepartAX.Add(DepartAX1);<br>    DepartAX.Add(DepartAX2);<br>    DepartAX1.Add(AX1e1);<br>    DepartAX1.Add(AX1e2);<br>    DepartAY.Add(AYe1);<br>    DepartAY.Add(AYe2);<br>    <span class="hljs-comment">//遍历总公司</span><br>    DepartA.Display(<span class="hljs-number">1</span>);<br>    Console.ReadKey();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202205051432849.png" alt="image-20220505143244328"></p>]]></content>
    
    
    <summary type="html">在树形结构的处理中模糊了对象和对象组的概念，使用对象和对象组采用了统一的接口，让我们可以像处理简单对象一样处理对象组。</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-桥接模式</title>
    <link href="http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-05T03:42:30.000Z</published>
    <updated>2022-05-05T05:36:16.485Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式-桥接模式"><a href="#设计模式-桥接模式" class="headerlink" title="设计模式-桥接模式"></a>设计模式-桥接模式</h1><h2 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h2><blockquote><p>一个类可以通过多角度来分类，每一种分类都可能变化，那么就把多角度分离出来让各个角度都能独立变化，降低各个角度间的耦合。</p></blockquote><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><blockquote><p>画图形，图形有图形种类和颜色两个指标组成，如果现在要画三种不同的图形并且会有三种不同的颜色，按照现有要求，会每个图形+颜色为一个类的话，会产生9个类或者方法来完成，如果要加图形或者颜色的话，类或者方法会增长的很快，所以需要桥接模式。</p></blockquote><h3 id="形状抽象"><a href="#形状抽象" class="headerlink" title="形状抽象"></a>形状抽象</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span><br>&#123;<br>    <span class="hljs-comment">//形状内部包含了另一个维度：color</span><br>    <span class="hljs-keyword">protected</span> IColor color;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetColor</span>(<span class="hljs-params">IColor color</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.color = color;<br>    &#125;<br><br>    <span class="hljs-comment">//设置形状</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="颜色接口"><a href="#颜色接口" class="headerlink" title="颜色接口"></a>颜色接口</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 颜色接口</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IColor</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Paint</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> shape</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 蓝色</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Blue</span> : <span class="hljs-title">IColor</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Paint</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> shape</span>)</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">$&quot;蓝色的<span class="hljs-subst">&#123;shape&#125;</span>&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 黄色</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Yellow</span> : <span class="hljs-title">IColor</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Paint</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> shape</span>)</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">$&quot;黄色的<span class="hljs-subst">&#123;shape&#125;</span>&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 红色</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Red</span> : <span class="hljs-title">IColor</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Paint</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> shape</span>)</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">$&quot;红色的<span class="hljs-subst">&#123;shape&#125;</span>&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 圆形</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span> : <span class="hljs-title">Shape</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span>()</span><br>    &#123;<br>        color.Paint(<span class="hljs-string">&quot;圆形&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 长方形</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span> : <span class="hljs-title">Shape</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span>()</span><br>    &#123;<br>        color.Paint(<span class="hljs-string">&quot;长方形&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 三角形</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Triangle</span> : <span class="hljs-title">Shape</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Draw</span>()</span><br>    &#123;<br>        color.Paint(<span class="hljs-string">&quot;三角形&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建形状"><a href="#创建形状" class="headerlink" title="创建形状"></a>创建形状</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>&#123;<br>    Shape circle = <span class="hljs-keyword">new</span> Circle();<br>    IColor blue = <span class="hljs-keyword">new</span> Blue();<br>    circle.SetColor(blue);<span class="hljs-comment">//设置颜色</span><br>    circle.Draw();<span class="hljs-comment">//画图</span><br><br>    Shape triangle = <span class="hljs-keyword">new</span> Triangle();<br>    triangle.SetColor(blue);<br>    triangle.Draw();<br><br>    Console.ReadLine();<br>&#125;<br><br><span class="hljs-comment">//输出：</span><br><span class="hljs-comment">//蓝色圆形</span><br><span class="hljs-comment">//蓝色三角形</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">一个类可以通过多角度来分类，每一种分类都可能变化，那么就把多角度分离出来让各个角度都能独立变化，降低各个角度间的耦合。</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-适配器模式</title>
    <link href="http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-05T03:10:57.000Z</published>
    <updated>2022-05-05T03:37:15.152Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式-适配器模式"><a href="#设计模式-适配器模式" class="headerlink" title="设计模式-适配器模式"></a>设计模式-适配器模式</h1><h2 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h2><blockquote><p>有对象适配、有类适配。类似于插座转化器，如下栗子。</p></blockquote><h2 id="类适配模式"><a href="#类适配模式" class="headerlink" title="类适配模式"></a>类适配模式</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta">#<span class="hljs-keyword">region</span> 类适配模式</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">ITwo</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Request1</span>()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ThreeAdaptee</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Request2</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;我是三个孔的插头&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ThreeToTwoAdapter</span> : <span class="hljs-title">ThreeAdaptee</span>, <span class="hljs-title">ITwo</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Request1</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.Request2();<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br></code></pre></td></tr></table></figure><h2 id="类适配模式运行"><a href="#类适配模式运行" class="headerlink" title="类适配模式运行"></a>类适配模式运行</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">ITwo change = <span class="hljs-keyword">new</span> ThreeToTwoAdapter();<br><br>change.Request1();<br><br>Console.ReadLine();<br></code></pre></td></tr></table></figure><h2 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta">#<span class="hljs-keyword">region</span> 对象适配模式</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Two</span><span class="hljs-comment">//两口的插头</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Request1</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;2个孔的插头可以使用&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Three</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Request2</span>()</span><br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;3个孔的插头可以使用&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TwoToThreeAdapter</span> : <span class="hljs-title">Two</span><br>&#123;<br>    Three three = <span class="hljs-keyword">new</span> Three();<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Request1</span>()</span><br>    &#123;<br>        three.Request2();<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br></code></pre></td></tr></table></figure><h2 id="对象适配器运行"><a href="#对象适配器运行" class="headerlink" title="对象适配器运行"></a>对象适配器运行</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Two two = <span class="hljs-keyword">new</span> TwoToThreeAdapter();<br><br>two.Request1();<br><br>Console.ReadLine();<br></code></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><ol><li>单一职责原则（优点）</li><li>开闭原则（优点）</li><li>代码复杂度增加（缺点）</li></ol><h2 id="适应场景"><a href="#适应场景" class="headerlink" title="适应场景"></a>适应场景</h2><ol><li>如果第三方的接口或者代码于现有的接口、代码不兼容的时候，可以添加一个中间适配器层来解决这样的问题。</li></ol>]]></content>
    
    
    <summary type="html">插座转换器</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-原型模式</title>
    <link href="http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/05/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-05T02:20:47.000Z</published>
    <updated>2022-05-05T02:36:35.933Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式-原型模式"><a href="#设计模式-原型模式" class="headerlink" title="设计模式-原型模式"></a>设计模式-原型模式</h1><h2 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h2><blockquote><p>用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。</p></blockquote><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><h3 id="以手机来做个原型"><a href="#以手机来做个原型" class="headerlink" title="以手机来做个原型"></a>以手机来做个原型</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 手机原型</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MobilePhonePrototype</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> _brand;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 品牌</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Brand<br>    &#123;<br>        <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> _brand; &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MobilePhonePrototype</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> brand</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>._brand = brand;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> MobilePhonePrototype <span class="hljs-title">Clone</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小米原型"><a href="#小米原型" class="headerlink" title="小米原型"></a>小米原型</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 小米手机原型</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">XiaoMiPrototype</span> : <span class="hljs-title">MobilePhonePrototype</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">XiaoMiPrototype</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> brand</span>)</span><br><span class="hljs-function">        : <span class="hljs-title">base</span>(<span class="hljs-params">brand</span>)</span><br>        &#123;<br>        &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> MobilePhonePrototype <span class="hljs-title">Clone</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> (MobilePhonePrototype)<span class="hljs-keyword">this</span>.MemberwiseClone();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="苹果手机原型"><a href="#苹果手机原型" class="headerlink" title="苹果手机原型"></a>苹果手机原型</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 苹果手机原型</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ApplePrototype</span> : <span class="hljs-title">MobilePhonePrototype</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ApplePrototype</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> brand</span>)</span><br><span class="hljs-function">        : <span class="hljs-title">base</span>(<span class="hljs-params">brand</span>)</span><br>        &#123;<br>        &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> MobilePhonePrototype <span class="hljs-title">Clone</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> (MobilePhonePrototype)<span class="hljs-keyword">this</span>.MemberwiseClone();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>由于原型模式<code>Prototype</code>是一种创建型设计模式，它关注的是大量相同或者相似的对象创建问题。通过<code>new</code>一个对象后，然后通过<code>new</code>出来的对象进行复制，创建出相同的对象。也就是通过这种方式来创建对象。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp">XiaoMiPrototype xiaomi = <span class="hljs-keyword">new</span> XiaoMiPrototype(<span class="hljs-string">&quot;小米&quot;</span>);<br>XiaoMiPrototype xiaomi2 = (XiaoMiPrototype)xiaomi.Clone();<br>Console.WriteLine(xiaomi2.Brand);<br><br>ApplePrototype iphone = <span class="hljs-keyword">new</span> ApplePrototype(<span class="hljs-string">&quot;iPhone7 Plus&quot;</span>);<br>ApplePrototype iphone2 = (ApplePrototype)iphone.Clone();<br>Console.WriteLine(iphone2.Brand);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-建造者模式</title>
    <link href="http://example.com/2022/05/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/05/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-04T12:10:57.000Z</published>
    <updated>2022-05-05T02:38:11.429Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式-建造者模式"><a href="#设计模式-建造者模式" class="headerlink" title="设计模式-建造者模式"></a>设计模式-建造者模式</h1><h2 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h2><blockquote><p>将一个复杂对象的构建与他的表示分离出来，使得同样的构建过程构建不同的对象。</p></blockquote><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>拿组件电脑方案来举例</p><p>现在市面上组装机的各有不同，有不同的氪金方案。但是方案归方案，无外乎就是</p><h3 id="部件"><a href="#部件" class="headerlink" title="部件"></a>部件</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 电脑部件</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Product</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> CPU</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> CPUNAME &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 风扇</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> FANNAME &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 内存</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> MEMORY &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 硬盘</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> HARDDISK &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>那现在抽象这些个方法，意思就是如果要安装一部电脑，需要操作这些个步骤。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 构造者 </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Builder</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 安装CPU</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BUILD_CPU</span>()</span>;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 安装风扇</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BUILD_FAN</span>()</span>;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 安装内存条</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BUILD_MEMORY</span>()</span>;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 安装硬盘</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BUILD_DARDDISK</span>()</span>;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 返回安装的电脑</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Product <span class="hljs-title">GetComputer</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面这个只是构建电脑的步骤，但是还具体不到实操，接着整</p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>现在准备两种构建电脑的方案</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 方案1：产品A</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ProductA</span> : <span class="hljs-title">Builder</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> Product _computer = <span class="hljs-keyword">new</span> Product();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BUILD_CPU</span>()</span><br>    &#123;<br>        _computer.CPUNAME = <span class="hljs-string">&quot;I5&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BUILD_DARDDISK</span>()</span><br>    &#123;<br>        _computer.HARDDISK = <span class="hljs-string">&quot;金士顿&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BUILD_FAN</span>()</span><br>    &#123;<br>        _computer.FANNAME = <span class="hljs-string">&quot;九州风神&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BUILD_MEMORY</span>()</span><br>    &#123;<br>        _computer.MEMORY = <span class="hljs-string">&quot;海盗船&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> Product <span class="hljs-title">GetComputer</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> _computer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 方案2产品B</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ProductB</span> : <span class="hljs-title">Builder</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> Product _computer = <span class="hljs-keyword">new</span> Product();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BUILD_CPU</span>()</span><br>    &#123;<br>        _computer.CPUNAME = <span class="hljs-string">&quot;I7&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BUILD_DARDDISK</span>()</span><br>    &#123;<br>        _computer.HARDDISK = <span class="hljs-string">&quot;闪迪&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BUILD_FAN</span>()</span><br>    &#123;<br>        _computer.FANNAME = <span class="hljs-string">&quot;九州风神&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BUILD_MEMORY</span>()</span><br>    &#123;<br>        _computer.MEMORY = <span class="hljs-string">&quot;海盗船&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> Product <span class="hljs-title">GetComputer</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> _computer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ToDo"><a href="#ToDo" class="headerlink" title="ToDo"></a>ToDo</h3><p>现在已知</p><ol><li>构建电脑的部件：CPU、内存、风扇、硬盘</li><li>构建电脑的步骤：CPU、内存、风扇、硬盘、出厂</li><li>构建电脑的方案：各个部件具体的品牌</li></ol><p>现在需要确定谁来干，那就老板来干吧，小本买卖，当然，如果人多，可以多整几个</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 老板来构建电脑</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Bosss</span><br>&#123;<br>    <span class="hljs-comment">//构建</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Construct</span>(<span class="hljs-params">Builder builder</span>)</span><br>    &#123;<br>        <span class="hljs-comment">// 安装CPU</span><br>        builder.BUILD_CPU();<br><br>        <span class="hljs-comment">//安装硬盘</span><br>        builder.BUILD_DARDDISK();<br><br>        <span class="hljs-comment">//安装风扇</span><br>        builder.BUILD_FAN();<br><br>        <span class="hljs-comment">//安装内存</span><br>        builder.BUILD_MEMORY();<br><br>        <span class="hljs-comment">//完事-出厂</span><br>        builder.GetComputer();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，演示一下整体流程</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>    &#123;<br>        <span class="hljs-comment">//小明进店，发现老板不在店，叫来老板(实例化)</span><br>        Bosss bosss = <span class="hljs-keyword">new</span> Bosss();<br><br>        <span class="hljs-comment">//老板介绍有产品A 和 产品B，分别对应不同的配置。问小明要哪个？</span><br><br>        <span class="hljs-comment">//小明说小孩子才做选择题，成年人选择都要，然后老板然后去组装（生产）</span><br>        bosss.Construct(<span class="hljs-keyword">new</span> ProductA());<br>        bosss.Construct(<span class="hljs-keyword">new</span> ProductB());<br><br>        <span class="hljs-comment">//独立性,扩展性,需要扩展了就直接添加一个品种就行</span><br>        Console.ReadLine();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">将一个复杂对象的构建与他的表示分离出来，使得同样的构建过程构建不同的对象。</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>ApiFox参数配置</title>
    <link href="http://example.com/2022/04/28/APIFox-%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/04/28/APIFox-%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/</id>
    <published>2022-04-28T05:58:31.000Z</published>
    <updated>2022-04-28T06:25:03.561Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ApiFox-参数配置"><a href="#ApiFox-参数配置" class="headerlink" title="ApiFox 参数配置"></a>ApiFox 参数配置</h1><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204281421221.png" alt="ApiFox"></p><h2 id="设置全局参数"><a href="#设置全局参数" class="headerlink" title="设置全局参数"></a>设置全局参数</h2><p>出于<code>JWT</code>权限验证，需要获取<code>token</code>才能访问。否则就是如下情况。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204281421319.png" alt="401 Unauthoized"></p><p>先设置全局参数 <code>Authorizatior</code> 默认值 <code>bearer &#123;&#123;token&#125;&#125;</code></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204281421550.png" alt="设置全局参数"></p><p>在获取<code>token</code>的接口处，常规添加<code>Params</code>，主要是看<strong>后置操作</strong></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204281421954.png" alt="后置操作"></p><p>以下是添加完的。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204281421334.png" alt="添加公共脚本"></p><p>添加公共脚本</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204281422732.png" alt="公共脚本"></p><p>输入公共脚本内容</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204281422599.png" alt="公共脚本内容"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//核心</span><br>pm.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;Status code is 200&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    pm.<span class="hljs-property">response</span>.<span class="hljs-property">to</span>.<span class="hljs-property">have</span>.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>);<br>&#125;);<br><span class="hljs-comment">// 把responseBody转为json字符串</span><br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(responseBody);<br><span class="hljs-comment">// 设置环境变量token，供后面的接口引用，位置就是上一步获取的位置</span><br>pm.<span class="hljs-property">globals</span>.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;token&quot;</span>, data.<span class="hljs-property">result</span>.<span class="hljs-property">AccessToken</span>);<br></code></pre></td></tr></table></figure><p>以上，在执行完登录接口后，公共脚本会把<code>token</code>信息赋值给全局变量<code>Authorization</code>,其他接口就可以直接使用<code>token</code>了。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204281422625.png" alt="使用全局参数"></p>]]></content>
    
    
    <summary type="html">接口神器</summary>
    
    
    
    
    <category term="Api" scheme="http://example.com/tags/Api/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号网站调试</title>
    <link href="http://example.com/2022/04/01/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%BD%91%E7%AB%99%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/04/01/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%BD%91%E7%AB%99%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/</id>
    <published>2022-04-01T01:50:33.000Z</published>
    <updated>2022-04-01T02:51:09.791Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="微信公众号网站调试"><a href="#微信公众号网站调试" class="headerlink" title="微信公众号网站调试"></a>微信公众号网站调试</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>基于 <code>Microsoft Visual Studio 2019</code> 开发的<code>MVC</code> 作为微信公众号的后台，</p><p>由于微信公众号的限制，需要在后台设置业务域名进行安全验证。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310915539.png" alt="image-20220328151830858"></p><p>还有就是  <code>Microsoft Visual Studio 2019</code> 在开发的同时，是启用<code>IIS Express</code>  或者 <code>本地IIS</code>。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310915421.png" alt="image-20220328152024665"></p><p>综述上面两点，导致开发人员在项目调试的时候，没有以往那般丝滑。</p><h2 id="NATAPP"><a href="#NATAPP" class="headerlink" title="NATAPP"></a><code>NATAPP</code></h2><p>经朋友介绍，引入  <a href="https://natapp.cn/">NATAPP-内网穿透 基于ngrok的国内高速内网映射工具</a></p><p>大概分几步：</p><ol><li><p>注册，认证，这无需多言。</p></li><li><p>购买隧道，这里我买的是免费的，经费充裕尽量买收费的，这样域名不会变来变去。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310915731.png" alt="image-20220328152411264"></p></li><li><p>下载客户端，我这是 <code>windows 64</code></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204011050571.png" alt="image-20220328152651312"></p></li><li><p>修改<code>config.ini</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">default</span>]<br>authtoken=***********<br>clienttoken=<br>log=none                        <br>loglevel=ERROR                  <br>http_proxy= <br></code></pre></td></tr></table></figure><p>这里的 <code>authtoken</code> 是购买的隧道中的信息</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310915485.png" alt="image-20220328152850308"></p></li><li><p>双击<code>natapp.exe</code>,前提是本地的<code>IIS</code>或者别的宿主好使。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204011050248.png" alt="image-20220328153026831"></p></li></ol><p>至此，内外网穿透完事，得到外网域名和内网端口，但是还没有达到能通过VS可以调试的地步，接着整。</p><h2 id="本地发布"><a href="#本地发布" class="headerlink" title="本地发布"></a>本地发布</h2><p>接下来设置本地</p><ol><li><p>先在VS中把网站发布到本地的文件夹里，把上面这个<code>MP_verify_***********.TXT</code>，也放到这个地方，不放不行，不放上一步域名添加不了。</p></li><li><p>在<code>IIS</code>添加站点，我这本地是80端口，那就设置80端口的一个站点，站点的主机头就是：之前到手的那个域名，这个时候，基本上就能通过域名访问本地站点</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310915419.png" alt="image-20220328154224740"></p></li></ol><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310915010.png" alt="image-20220328154311358"></p><h2 id="公众号后台设置"><a href="#公众号后台设置" class="headerlink" title="公众号后台设置"></a>公众号后台设置</h2><p>设置微信公众号设置-功能设置，添加各种，由于之前有域名，那就添加刚到手的这个域名。添加的时候回提醒下载个<code>MP_verify_***********.TXT</code>文件放到本地，介时下载下来先备用。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310915087.png" alt="image-20220328154628975"></p><h2 id="设置项目属性"><a href="#设置项目属性" class="headerlink" title="设置项目属性"></a>设置项目属性</h2><p>指向刚才发布的那个站点。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310915884.png" alt="image-20220328154940226"></p><p>这个时候，在调试的时候，就是以这个域名启动调试。</p><h2 id="微信开发者工具"><a href="#微信开发者工具" class="headerlink" title="微信开发者工具"></a>微信开发者工具</h2><p>最最最后，再来一个工具，微信开发者工具</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310916458.png" alt="image-20220328155132195"></p><p>是为了当验证用户的时候，不用弹出</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310916145.png" alt="image-20220328155311767"></p><p>至此，准备工作都完成了</p><h2 id="修改HOST"><a href="#修改HOST" class="headerlink" title="修改HOST"></a>修改HOST</h2><p><code>C:\Windows\System32\drivers\etc</code></p><p>最后添加 <code>127.0.0.1</code>  域名</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202203310916713.png" alt="image-20220328161612732"></p><h2 id="调试顺序"><a href="#调试顺序" class="headerlink" title="调试顺序"></a>调试顺序</h2><ol><li>VS 启动调试，断点啥的该打打上。</li><li>微信开发工具 地址栏填写您要请求的页面地址。</li><li>进断点，为所欲为。</li><li>开发者工具可以调试前端代码。</li></ol>]]></content>
    
    
    <summary type="html">温故而知新，可以为师矣。</summary>
    
    
    
    <category term="微信公众号" scheme="http://example.com/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
    
    <category term="公众号" scheme="http://example.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
    <category term="内网穿透" scheme="http://example.com/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Docker for RabbitMq</title>
    <link href="http://example.com/2022/03/19/Docker-for-RabbitMq/"/>
    <id>http://example.com/2022/03/19/Docker-for-RabbitMq/</id>
    <published>2022-03-19T12:00:52.000Z</published>
    <updated>2022-04-25T05:41:48.472Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker-for-RabbitMQ"><a href="#Docker-for-RabbitMQ" class="headerlink" title="Docker for RabbitMQ"></a>Docker for RabbitMQ</h1><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/202204251340905.jpeg" alt="rabbitmqlogo"></p><h2 id="run"><a href="#run" class="headerlink" title="run"></a>run</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -dit --name Myrabbitmq -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 rabbitmq:management<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">-d                          #后台运行<br>-- homename fuyi-rabbit     #主机名<br>RABBITMQ_DEFAULT_USER=admin #可视化界面登录用户名<br>RABBITMQ_DEFAULT_PASS=admin #可视化界面登录密码<br>-p 15672:15672              #端口映射<br>c20                         #镜像ID<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Docker 安装 RabbitMQ</summary>
    
    
    
    <category term="RabbitMq" scheme="http://example.com/categories/RabbitMq/"/>
    
    
    <category term="Docke" scheme="http://example.com/tags/Docke/"/>
    
  </entry>
  
  <entry>
    <title>Office Tools 安装部署Office</title>
    <link href="http://example.com/2022/03/12/Office%20Tools%20%E5%AE%89%E8%A3%85%E8%80%81%E4%B8%89%E4%BB%B6%E5%92%8CVisio/"/>
    <id>http://example.com/2022/03/12/Office%20Tools%20%E5%AE%89%E8%A3%85%E8%80%81%E4%B8%89%E4%BB%B6%E5%92%8CVisio/</id>
    <published>2022-03-11T16:07:20.000Z</published>
    <updated>2022-03-31T01:47:44.874Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/Snipaste_2022-03-18_21-16-56.png"></p><h1 id="Office-Tools"><a href="#Office-Tools" class="headerlink" title="Office Tools"></a>Office Tools</h1><p>官网</p><p><a href="https://otp.landian.vip/zh-cn/">Office Tool Plus 官方网站 - 一键部署 Office (landian.vip)</a></p><p>选择产品</p><p>我这是安装完的，之前的忘记截图了。我选择了Office 专业增强版 2019 和 Visio 专业版 2019</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220312000401414.png" alt="选择"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220311235809244.png" alt="安装中"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220311235930667.png" alt="关闭防护"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220312000022460.png" alt="激活"></p><p>最后记得MKS激活一发即可。</p>]]></content>
    
    
    <summary type="html">Office Tools 安装部署 老三件和Visio</summary>
    
    
    
    <category term="StorageBox" scheme="http://example.com/categories/StorageBox/"/>
    
    
    <category term="Program" scheme="http://example.com/tags/Program/"/>
    
  </entry>
  
  <entry>
    <title>DotNet &amp; DotNet Core 区别</title>
    <link href="http://example.com/2022/02/12/dotnet-dotnetcore%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2022/02/12/dotnet-dotnetcore%E5%8C%BA%E5%88%AB/</id>
    <published>2022-02-12T09:25:29.000Z</published>
    <updated>2022-03-31T01:47:44.876Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="DotNet-与-DotNet-Core-的区别"><a href="#DotNet-与-DotNet-Core-的区别" class="headerlink" title="DotNet 与 DotNet Core 的区别"></a>DotNet 与 DotNet Core 的区别</h1><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220212182101257.png" alt="image-20220212182101257"></p><p><strong>DotNet 包含 DotNet Core</strong> </p><p><strong>DotNet</strong> 内有 <strong>DotNet Framework</strong> 、<strong>DotNet Core</strong> 、<strong>Xamarin</strong></p><p><strong>DotNet Framework</strong> 支持Windows和Web应用程序。今天，您可以使用Windows窗体，WPF和UWP在.NET Framework中构建Windows应用程序。ASP.NET MVC用于在.NET Framework中构建Web应用程序。</p><p><strong>DotNet Core</strong> 是一种新的开源和跨平台框架，用于为包括Windows，Mac和Linux在内的所有操作系统构建应用程序。.NET Core仅支持UWP和ASP.NET Core。UWP用于构建Windows 10目标Windows和移动应用程序。ASP.NET Core用于构建基于浏览器的Web应用程序。 </p><p><strong>Xamarin</strong> 无庸置疑，当您想使用C#构建移动（iOS，Android和Windows Mobile）应用程序时，Xamarin是您唯一的选择。</p><p><strong>DotNet Standard</strong>  是一套官方定义的API规范，DotNet Framework 和 DotNet Core 都实现了这套规范。</p><table><thead><tr><th></th><th>DotNet Framework</th><th>DotNet Core</th></tr></thead><tbody><tr><td>跨平台</td><td>windows</td><td>windows、Linux、Mac</td></tr><tr><td>微服务</td><td>基于对Docker的支持，不建议</td><td>支持，有些中间件天然支持Core</td></tr><tr><td>容器化</td><td>可以，但笨重</td><td>轻</td></tr><tr><td>多版本并行</td><td>net 4.0 支持并行了也只是和3.5</td><td>全版本并行</td></tr><tr><td>高性能可扩展</td><td>一般</td><td>天然支持</td></tr><tr><td>开源</td><td>否</td><td>是</td></tr></tbody></table><p>再结合下图</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220212182623858.png" alt="族谱"></p><h2 id="NET-Core和ASP-NET-Core区别"><a href="#NET-Core和ASP-NET-Core区别" class="headerlink" title=".NET Core和ASP.NET Core区别"></a><strong>.NET Core和ASP.NET Core区别</strong></h2><ol><li><p>.NET Core是运行时。它可以执行为其构建的应用程序。ASP.NET Core是构成一个用于构建Web应用程序的框架的库的集合。ASP.NET Core库可以在.NET Core和“完整.NET Framework”（Windows附带许多年）上使用。</p></li><li><p>使用.NET Core的 ASP.NET CORE-所有依赖项都是自包含的，可以使用大多数Nuget包，不能使用Windows特定的包，可以在Windows，Linux，Mac上执行</p></li><li><p>使用.NET Framework的 ASP.NET CORE-大多数依赖项都是自包含的，仅在Windows上执行，将有权访问Windows特定的Nuget软件包，需要在计算机上安装有针对性的.NET Framework版本</p></li></ol><h2 id="ASP-NET-Core-NET-Core-and-ASP-NET-Core-NET-Framework-区别"><a href="#ASP-NET-Core-NET-Core-and-ASP-NET-Core-NET-Framework-区别" class="headerlink" title="ASP.NET Core (.NET Core) and ASP.NET Core (.NET Framework)区别"></a><strong>ASP.NET Core (.NET Core) and ASP.NET Core (.NET Framework)区别</strong></h2><p><strong>ASP.NET Core (.NET Core)</strong></p><blockquote><p>使用.Net Core运行时的ASP.NET Core可以支持跨平台(Windows, Mac, and Linux (包括Docker)),服务器不需要安装.Net Core，它的依赖与应用程序捆绑在一起。而且它是高性能的开源的框架。它能够在您自己的进程中托管IIS，Nginx，Apache，Docker或自托管。ASP.NET Core完全作为NuGet包发布。这允许您优化您的应用程序，使其仅包含必要的NuGet包。实际上，面向.NET Core的ASP.NET Core 2.x应用程序只需要一个NuGet包。应用程序表面积较小的好处，可以有更严格的安全性，更少的服务和更高的性能。可以使用 Kestrel web server。可以使用Visual Studio Code写代码。它现在还不支持Aspx, WPF, WCF and WebServices。它内置依赖注入的支持。可以使用coreclr，它是带有.net core的asp.net核心的运行时。</p></blockquote><p><strong>ASP.NET Core (.NET Framework)</strong></p><blockquote><p>使用.NET Framework运行时的ASP.NET Core可以支持桌面应用，也可以说是完整版。但这些应用程序只能在Windows上运行，但有关ASP.NET Core的其他所有内容的行为方式都相同。另一方面，.Net框架在2005年之前就开始了，它不断添加新功能，使其成为一个复杂的框架和更重的框架。它不是跨平台的。它支持Aspx，WPF，WCF和WebServices。</p></blockquote><p>参考资料</p><ol><li><a href="https://www.cjavapy.com/article/73/">ASP.NET Core (.NET Core) and ASP.NET Core (.NET Framework)区别-CJavaPy</a></li><li><a href="https://blog.csdn.net/qq_21209307/article/details/104891873?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&utm_relevant_index=1">.NET Framework， .NET Core 和.NET Standard的区别和联系_Will Wang0715的博客-CSDN博客</a></li></ol>]]></content>
    
    
    <summary type="html">DotNet &amp; DotNet Core 区别</summary>
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
    <category term="Interview" scheme="http://example.com/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>Docker+GitLab+Jenkins</title>
    <link href="http://example.com/2022/01/20/jenkins/"/>
    <id>http://example.com/2022/01/20/jenkins/</id>
    <published>2022-01-20T14:47:51.000Z</published>
    <updated>2022-03-31T01:47:44.877Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大概意图：<code>Docker</code>+<code>GitLab</code>+<code>Jenkins</code> 自动部署 <code>Dot Net Core Web Application</code></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220120211456716.png" alt="大概意图"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220120212431735.png" alt="主要容器"></p><h2 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h2><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/cd796745db80288a131fb24d57d12880.jpeg" alt="Gitlab"></p><h3 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull gitlab/gitlab-ce<br></code></pre></td></tr></table></figure><p>或者 导入本地镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker load &lt; /root/dockerimage/xxxx.tar<br></code></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d  -p 443:443 -p 8888:80 -p 222:22 --name gitlab --restart always \<br>-v /root/gitlab/config:/etc/gitlab \<br>-v /root/gitlab/logs:/var/log/gitlab \<br>-v /root/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce<br></code></pre></td></tr></table></figure><h3 id="添加秘钥"><a href="#添加秘钥" class="headerlink" title="添加秘钥"></a>添加秘钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &#x27;xxx@xxx.com&#x27;<br></code></pre></td></tr></table></figure><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220120225149050.png" alt="Jenkins"></p><h3 id="Windows-安装"><a href="#Windows-安装" class="headerlink" title="Windows 安装"></a>Windows 安装</h3><h4 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h4><p>安装 JDK 1.8 <code>jdk-8u321-windows-x64.exe</code> </p><p>安装完成之后设置环境变量</p><h4 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h4><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220125134818266.png" alt="image-20220125134818266"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220125134838645.png" alt="image-20220125134838645"></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mel">JAVA_HOME<br>C:\Program Files\Java\jdk1<span class="hljs-number">.8</span><span class="hljs-number">.0</span>_321<br><br>CLASSPATH<br>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;<br></code></pre></td></tr></table></figure><h4 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h4><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220125135007369.png" alt="image-20220125135007369"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220125135030637.png" alt="image-20220125135030637"></p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haml">Path<br><span class="hljs-tag">%<span class="hljs-selector-tag">JAVA_HOME</span></span>%\bin\<br><span class="hljs-tag">%<span class="hljs-selector-tag">JAVA_HOME</span></span>%\jre\bin\<br></code></pre></td></tr></table></figure><h4 id="下载-war"><a href="#下载-war" class="headerlink" title="下载 war"></a>下载 war</h4><p><code>jenkins.war</code>:下载 <a href="https://mirrors.huaweicloud.com/jenkins/war/2.269/">https://mirrors.huaweicloud.com/jenkins/war/2.269/</a> </p><h4 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h4><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220125135345995.png" alt="image-20220125135345995"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> D:\jenkins<br>java -jar jenkins.war<br></code></pre></td></tr></table></figure><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220125135452362.png" alt="image-20220125135452362"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220125135709149.png" alt="image-20220125135709149"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220125135728614.png" alt="image-20220125135728614"></p><h3 id="Linux-安装"><a href="#Linux-安装" class="headerlink" title="Linux 安装"></a>Linux 安装</h3><h4 id="镜像下载-1"><a href="#镜像下载-1" class="headerlink" title="镜像下载"></a>镜像下载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull jenkins/jenkins<br></code></pre></td></tr></table></figure><h4 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -u root -d -p 8080:8080 -p 50000:50000 -v /root/jenkins_data/DockerData:/var/jenkins_home -v /root/jenkins_data/docker.sock:/var/run/docker.sock jenkins/jenkins --restart always<br></code></pre></td></tr></table></figure><h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><blockquote><p> Please wait while Jenkins is getting ready to work …</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">打开</span><br>hudson.model.UpdateCenter.xml   #这个就是挂载的root/jenkins_data/Dockerdata里<br><span class="hljs-meta prompt_"># </span><span class="language-bash">把</span><br>http://updates.jenkins-io/update-center.json<br><span class="hljs-meta prompt_"># </span><span class="language-bash">改成 清华大学镜像地址</span><br>http://mirror.xmission.com/jenkins/updates/update-center.json<br></code></pre></td></tr></table></figure><h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><blockquote><p>容器内执行<code>apt-get update</code> 总超时，需要添加源</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将容器内的配置文件导出来</span><br>docker cp elegant_neumann:&quot;/etc/apt/sources.list&quot; /root/jenkins_config/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将修改好的配置文件覆盖到容器中</span><br>docker cp &quot;/root/jenkins_config/sources.list&quot; elegant_neumann:&quot;/etc/apt/sources.list&quot;<br></code></pre></td></tr></table></figure><h4 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h4><blockquote><p>更新源后会报错：<code>NO_PUBKEY 40976EAF437D05B5 NO_PUBKEY 3B4FE6ACC0B21F32</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 40976EAF437D05B5 3B4FE6ACC0B21F32<br></code></pre></td></tr></table></figure><p>然后添加ping <code>apt install iputils-ping</code></p><h4 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h4><blockquote><p>因为要在<code>Jenkins</code>中运行 <code>DotNet 5.0 Web</code>，所以需要在<code>Jenkins</code>容器内有 <code>dotnet 5.0 SDK</code>,这个问题会体现在构建的时候。</p><p>这涉及到通过<code>Dockerfile</code> 创建镜像，这里需要创建一个携带<code>dotnet5.0 SDK</code>的<code>jenkins</code>镜像</p></blockquote><p>参考地址：<a href="https://blog.csdn.net/feng005211/article/details/114818504">.NET 5 + Docker Jenkins，做自动化部署，全Docker环境</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">封装Jenkins镜像（带有dotnet环境的） sdk=5.1</span><br>FROM jenkins/jenkins:lts<br>USER root<br>WORKDIR /dotnet<br>RUN wget -O dotnet.tar.gz https://download.visualstudio.microsoft.com/download/pr/820db713-c9a5-466e-b72a-16f2f5ed00e2/628aa2a75f6aa270e77f4a83b3742fb8/dotnet-sdk-5.0.100-linux-x64.tar.gz<br>RUN tar zxf dotnet.tar.gz -C ./<br>RUN rm -rf dotnet.tar.gz<br>ENV PATH=&quot;$&#123;PATH&#125;:/dotnet:/var/jenkins_home/.dotnet/tools&quot;<br>ENV DOTNET_ROOT=&quot;/dotnet&quot;<br>RUN apt update -y<br>RUN apt install icu-devtools vim zip unzip -y<br>RUN usermod -a -G root jenkins<br>USER jenkins<br></code></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs haskell">命令解释<br><span class="hljs-number">1</span>.这个<span class="hljs-type">Docker</span>镜像基于jenkins<br><span class="hljs-number">2</span>.设置当前用户为root，因为后面安装需要使用root<br><span class="hljs-number">3</span>.设置当前工作目录为<span class="hljs-keyword">dotnet</span><br><span class="hljs-number">4</span>.下载<span class="hljs-keyword">dotnet</span> <span class="hljs-type">SDK</span>包，保存为<span class="hljs-keyword">dotnet</span>.tar.gz。这里要注意下载正确版本的<span class="hljs-type">SDK</span>，可前往微软官方网站获取下载链接：https://<span class="hljs-keyword">dotnet</span>.microsoft.com/download<br><span class="hljs-number">5</span>.解压<span class="hljs-keyword">dotnet</span> <span class="hljs-type">SDK</span>到当前目录，即/<span class="hljs-keyword">dotnet</span>目录<br><span class="hljs-number">6</span>.删除<span class="hljs-keyword">dotnet</span> <span class="hljs-type">SDK</span>包<br><span class="hljs-number">7</span>.把<span class="hljs-keyword">dotnet</span>目录和<span class="hljs-keyword">dotnet</span> tools目录添加到环境变量<span class="hljs-type">PATH</span>，这样就可以使用<span class="hljs-keyword">dotnet</span>命令了<br><span class="hljs-number">8</span>.设置<span class="hljs-type">DOTNET_ROOT</span>变量<br><span class="hljs-number">9</span>.更新源<br><span class="hljs-number">10</span>.安装一些必需的，常用的工具包，其中icu-devtools是运行<span class="hljs-keyword">dotnet</span>需要的<br><span class="hljs-number">11</span>.修改jenkins用户到root附加组<br><span class="hljs-number">12</span>.设置当前用户为jenkins<br></code></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haskell">构建镜像 name=jenkins:<span class="hljs-keyword">dotnet</span><br><span class="hljs-title">docker</span> build -t jenkins:<span class="hljs-keyword">dotnet</span> .<br>很简单的将包含<span class="hljs-keyword">dotnet</span>环境的jenkins安装好了<br></code></pre></td></tr></table></figure><h4 id="问题5"><a href="#问题5" class="headerlink" title="问题5"></a>问题5</h4><blockquote><p>容器内想安装别的就会用到 wget</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update  <br>apt-get install wget  <br>wget --version  <br></code></pre></td></tr></table></figure><h4 id="问题6"><a href="#问题6" class="headerlink" title="问题6"></a>问题6</h4><blockquote><p>构建携带dotnet 5环境的Jenkins镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">封装Jenkins镜像（带有dotnet环境的） sdk=5.1</span><br>FROM jenkins/jenkins:latest<br>USER root<br>WORKDIR /dotnet<br>RUN echo &quot;deb http://mirrors.aliyun.com/debian/ buster main non-free contrib\n\<br>deb http://mirrors.aliyun.com/debian-security buster/updates main\n\<br>deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib\n\<br>deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib\n\<br>deb-src http://mirrors.aliyun.com/debian-security buster/updates main\n\<br>deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib\n\<br>deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib\n\<br>deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib&quot; &gt; /etc/apt/sources.list<br>RUN apt-get update --fix-missing &amp;&amp; apt-get install -y wget --fix-missing<br>RUN wget -O dotnet.tar.gz https://download.visualstudio.microsoft.com/download/pr/820db713-c9a5-466e-b72a-16f2f5ed00e2/628aa2a75f6aa270e77f4a83b3742fb8/dotnet-sdk-5.0.100-linux-x64.tar.gz<br>RUN tar zxf dotnet.tar.gz -C ./<br>RUN rm -rf dotnet.tar.gz<br>ENV PATH=&quot;$&#123;PATH&#125;:/dotnet:/var/jenkins_home/.dotnet/tools&quot;<br>ENV DOTNET_ROOT=&quot;/dotnet&quot;<br>RUN apt update -y<br>RUN apt install icu-devtools vim zip unzip -y<br>RUN usermod -a -G root jenkins<br>USER jenkins<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name dotnetjenkins  --restart always -u root -d -p 8080:8080 -p 50000:50000 -v /root/jenkins_data/DockerData:/var/jenkins_home -v /root/jenkins_data/docker.sock:/var/run/docker.sock jenkins:dotnet<br></code></pre></td></tr></table></figure><h2 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h2><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220127143255440.png" alt="image-20220127143255440"></p><p>私有仓库服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull registry:2.7.1<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>   -p 5001:5000 \<br>   --restart=always \<br>   --name registry \<br>   -v /root/data/docker-registry:/var/lib/registry \<br>   registry:2.7.1<br></code></pre></td></tr></table></figure><p>访问： <a href="http://192.168.137.5:5001/v2/">http://192.168.137.5:5001/v2/</a></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220126205651174.png" alt="image-20220126205651174"></p><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将hello-world 重新复制命名为 192.168.137.5:5001/hello-world</span><br>docker tag hello-world 192.168.137.5:5001/hello-world<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行 docker push 192.168.137.5:5001/hello-world 就会提交到私有仓库</span><br></code></pre></td></tr></table></figure><h3 id="问题1-1"><a href="#问题1-1" class="headerlink" title="问题1"></a>问题1</h3><blockquote><p><code>Get &quot;https://192.168.137.5:5001/v2/&quot;: http: server gave HTTP response to HTTPS client</code></p></blockquote><p>此问题的原因是由于 Docker自从<code>1.3.X</code>之后docker registry交互默认使用的是<code>HTTPS</code>，但是搭建私有镜像默认使用的是<code>HTTP</code>服务，所以与私有镜像交时出现以上错误。</p><p>想要解决此问题，执行了两个方案，执行到第二种方才好使</p><p>第一种：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/docker/daemon.json<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加 <span class="hljs-string">&quot;insecure-registries&quot;</span>: [<span class="hljs-string">&quot;192.168.137.5:5001&quot;</span>]</span><br>&#123;<br>  &quot;insecure-registries&quot;: [&quot;192.168.137.5:5001&quot;],&quot;registry-mirrors&quot;: [&quot;https://i6*****.mirror.aliyuncs.com&quot;]<br>&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启 daemom</span><br>systemctl daemon-reload<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启docker服务</span><br>systemctl restart docker<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启容器</span><br>docker start $(docker ps -aq)<br></code></pre></td></tr></table></figure><p>第二种：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /usr/lib/systemd/system/docker.service<br></code></pre></td></tr></table></figure><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220126214929695.png" alt="image-20220126214929695"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在ExecStart 这行后面添加 --insecure-registry 192.168.137.5:5001  也就是在Docker启动的时候添加参数</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启 daemom</span><br>systemctl daemon-reload<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启docker服务</span><br>systemctl restart docker<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启容器</span><br>docker start $(docker ps -aq)<br></code></pre></td></tr></table></figure><p>问题解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@microservicevm:~# curl -XGET http://192.168.137.5:5001/v2/_catalog<br>&#123;&quot;repositories&quot;:[]&#125;<br><br>root@microservicevm:/# docker push 192.168.137.5:5001/hello-world<br>Using default tag: latest<br>The push refers to repository [192.168.137.5:5001/hello-world]<br>e07ee1baac5f: Pushed <br>latest: digest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4 size: 525<br><br>root@microservicevm:/# curl -XGET http://192.168.137.5:5001/v2/_catalog<br>&#123;&quot;repositories&quot;:[&quot;hello-world&quot;]&#125;<br></code></pre></td></tr></table></figure><h2 id="Harbor"><a href="#Harbor" class="headerlink" title="Harbor"></a>Harbor</h2><h2 id="Net-5-GitLab-Jenkins"><a href="#Net-5-GitLab-Jenkins" class="headerlink" title="Net 5 + GitLab + Jenkins"></a>Net 5 + GitLab + Jenkins</h2><h3 id="Net-5"><a href="#Net-5" class="headerlink" title="Net 5"></a>Net 5</h3><p>根据此处的<a href="#%E9%97%AE%E9%A2%986">Dockerfile</a>，创建携带.net 5.0 环境的<code>Jenkins</code>容器</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203204439495.png" alt="创建"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203204544944.png" alt="配置"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203204632628.png" alt="net5.0"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203204732348.png" alt="测试代码"></p><h3 id="Jenkins-1"><a href="#Jenkins-1" class="headerlink" title="Jenkins"></a>Jenkins</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203211820516.png" alt="系统管理-系统配置"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203211538155.png" alt="配置GitLab账号信息"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203205927175.png" alt="源码管理"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203210045375.png" alt="构建触发器"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203210232801.png" alt="点击高级获取Secret token"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203210446489.png" alt="构建"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203212831776.png" alt="设置凭证"></p><h3 id="GitLab-1"><a href="#GitLab-1" class="headerlink" title="GitLab"></a>GitLab</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203204909533.png" alt="将测试代码上传到Gitlab"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203211043489.png" alt="webhooks 设置网址和令牌"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203213909943.png" alt="GitPush-构建"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220203230849200.png" alt="控制台信息"></p>]]></content>
    
    
    <summary type="html">Docker+GitLab+Jenkins 自动部署 DotNet Core Application</summary>
    
    
    
    <category term="MicroService" scheme="http://example.com/categories/MicroService/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term=".net core" scheme="http://example.com/tags/net-core/"/>
    
    <category term="jenkins" scheme="http://example.com/tags/jenkins/"/>
    
    <category term="GitLab" scheme="http://example.com/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>Docker Compose</title>
    <link href="http://example.com/2022/01/19/DockerCompose/"/>
    <id>http://example.com/2022/01/19/DockerCompose/</id>
    <published>2022-01-19T08:46:15.000Z</published>
    <updated>2022-03-31T01:47:44.871Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119155234027.png" alt="image-20220119155234027"></p><h2 id="why-docker-compose"><a href="#why-docker-compose" class="headerlink" title="why docker compose"></a>why docker compose</h2><p>​        操作Docker的时候</p><p>​        如果只是操作单例服务的话，用docker命令操作:<code>build</code>、<code>run</code> 等等就能满足。</p><p>​        但是在操作一整套服务的时候，涉及到的容器操作就会巨多，运行多个微服务实例再加多个Consul做集群，然后再加上<code>Oracle</code>、<code>redis</code>、<code>Rabbitmq</code>等等，就会捉襟见肘。</p><p>​        所以需要<code>Docker compose</code>帮助做容器编排。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Docker for windows 自带此功能</p><p>Linux 下：</p><p>从 Github 上下载它的二进制包来使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo curl -L &quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>网速慢,可以用daocloud下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>创建软链</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@vm02:~/webdemo# docker-compose --version<br>docker-compose version 1.25.1, build a82fef07<br></code></pre></td></tr></table></figure><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动项目</span><br>docker-compose up<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动（后台运行）</span><br>docker-compose up -d<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止项目</span><br>docker-compose down <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">项目日志</span><br>docker-compose logs<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看项目中的容器列表</span><br>docker-compose ps<br></code></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>通过<code>docker-compose</code> 启动 web 应用，同时使用<code>Nginx</code>反向代理。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119161032986.png" alt="DockerCompose"></p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><ol><li>将发布好的web应用文件放到服务器上。</li></ol><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119161132040.png" alt="服务器web应用位置"></p><ol start="2"><li><p>在服务器应用文件夹位置添加俩文件：<code>docker-compose.yml</code> 和 <code>proxy.conf</code></p><p><code>docker-compose.yml</code> 是 <code>docker-compose</code>的默认配置文件。</p><p><code>proxy.conf</code> 是要给<code>nginx</code>挂载的配置文件，回头可以放别的地方。</p></li></ol><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119161212330.png" alt="添加配置文件"></p><ol start="3"><li><p><code>docker-compose.yml</code></p><p><code>Docker-compose 配合文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-attr">services:</span><br>    <span class="hljs-attr">webdemo:</span><br>        <span class="hljs-attr">container_name:</span> <span class="hljs-string">webdemo.compose</span><br>        <span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br>        <span class="hljs-attr">ports:</span> <br>         <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8081:80&quot;</span><br><br>    <span class="hljs-attr">reverse-proxy:</span><br>        <span class="hljs-attr">container_name:</span> <span class="hljs-string">nginxdemo</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>        <span class="hljs-attr">ports:</span><br>         <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8082:80&quot;</span><br>        <span class="hljs-attr">volumes:</span><br>         <span class="hljs-bullet">-</span> <span class="hljs-string">./proxy.conf:/etc/nginx/conf.d/default.conf</span><br></code></pre></td></tr></table></figure><p>释义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">version: &#x27;2&#x27;<br>services:<br>    webdemo:<br>        container_name: webdemo.compose # 容器名称<br>        build: . # build 当前文件夹<br>        ports: <br>         - &quot;8081:80&quot; # 端口映射<br><br>    reverse-proxy:<br>        container_name: nginxdemo # 容器名称<br>        image: nginx # 镜像名称<br>        ports:<br>         - &quot;8082:80&quot; # 端口映射<br>        volumes:<br>         - ./proxy.conf:/etc/nginx/conf.d/default.conf # 文件映射<br></code></pre></td></tr></table></figure></li><li><p><code>proxy.conf</code></p><p><code>Nginx 配置</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">server &#123;<br>  listen <span class="hljs-number">80</span>;<br><br>  location / &#123;<br>    proxy_pass http:<span class="hljs-comment">//192.168.137.6:8081;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>释义：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#">server &#123;<br>  listen <span class="hljs-number">80</span>; <span class="hljs-comment">//监听端口</span><br><br>  location / &#123;<br>    proxy_pass http:<span class="hljs-comment">//192.168.137.6:8081; //跳转url</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p><code>docker-compose up -d</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@vm02:~/webdemo# docker-compose up -d<br>Creating network &quot;webdemo_default&quot; with the default driver<br>Creating webdemo.compose ... done<br>Creating nginxdemo       ... done<br></code></pre></td></tr></table></figure><h4 id="启动日志"><a href="#启动日志" class="headerlink" title="启动日志"></a>启动日志</h4><p><code>docker-compose logs</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@vm02:~/webdemo# docker-compose logs<br>Attaching to nginxdemo, webdemo.compose<br>nginxdemo        | /docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration<br>nginxdemo        | /docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/<br>nginxdemo        | /docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh<br>nginxdemo        | 10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf<br>nginxdemo        | 10-listen-on-ipv6-by-default.sh: info: /etc/nginx/conf.d/default.conf differs from the packaged version<br>nginxdemo        | /docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh<br>nginxdemo        | /docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh<br>nginxdemo        | /docker-entrypoint.sh: Configuration complete; ready for start up<br>nginxdemo        | 2022/01/19 08:27:00 [notice] 1#1: using the &quot;epoll&quot; event method<br>nginxdemo        | 2022/01/19 08:27:00 [notice] 1#1: nginx/1.21.5<br>nginxdemo        | 2022/01/19 08:27:00 [notice] 1#1: built by gcc 10.2.1 20210110 (Debian 10.2.1-6) <br>nginxdemo        | 2022/01/19 08:27:00 [notice] 1#1: OS: Linux 5.4.0-94-generic<br>nginxdemo        | 2022/01/19 08:27:00 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576<br>nginxdemo        | 2022/01/19 08:27:00 [notice] 1#1: start worker processes<br>nginxdemo        | 2022/01/19 08:27:00 [notice] 1#1: start worker process 30<br>webdemo.compose  | warn: Microsoft.AspNetCore.DataProtection.Repositories.FileSystemXmlRepository[60]<br>webdemo.compose  |       Storing keys in a directory &#x27;/root/.aspnet/DataProtection-Keys&#x27; that may not be persisted outside of the container. Protected data will be unavailable when container is destroyed.<br>webdemo.compose  | warn: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[35]<br>webdemo.compose  |       No XML encryptor configured. Key &#123;887cc5db-dcb2-4d26-886d-0f3aa1c787c9&#125; may be persisted to storage in unencrypted form.<br>webdemo.compose  | info: Microsoft.Hosting.Lifetime[0]<br>webdemo.compose  |       Now listening on: http://[::]:80<br>webdemo.compose  | info: Microsoft.Hosting.Lifetime[0]<br>webdemo.compose  |       Application started. Press Ctrl+C to shut down.<br>webdemo.compose  | info: Microsoft.Hosting.Lifetime[0]<br>webdemo.compose  |       Hosting environment: Production<br>webdemo.compose  | info: Microsoft.Hosting.Lifetime[0]<br>webdemo.compose  |       Content root path: /app<br></code></pre></td></tr></table></figure><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119162936354.png" alt="执行日志"></p><h4 id="容器列表"><a href="#容器列表" class="headerlink" title="容器列表"></a>容器列表</h4><p><code>docker ps</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@vm02:~/webdemo# docker ps<br>CONTAINER ID   IMAGE             COMMAND                  CREATED              STATUS              PORTS                                   NAMES<br>0d4ea2075140   nginx             &quot;/docker-entrypoint.…&quot;   About a minute ago   Up About a minute   0.0.0.0:8082-&gt;80/tcp, :::8082-&gt;80/tcp   nginxdemo<br>686adcb2655a   webdemo_webdemo   &quot;dotnet WebDemo.dll&quot;     About a minute ago   Up About a minute   0.0.0.0:8081-&gt;80/tcp, :::8081-&gt;80/tcp   webdemo.compose<br></code></pre></td></tr></table></figure><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119163032471.png" alt="容器列表"></p><h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119163327957.png" alt="运行结果"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>至此，已经完成了通过<code>Docker-compose</code>动态编排容器，实现<code>Nginx</code>反向代理<code>.Net core web 应用程序</code></p><p>随着学习的深入，后续也会渐渐丰满本篇内容。</p>]]></content>
    
    
    <summary type="html">通过Docker Compose 启动.net core web 应用程序并且使用Nginx反向代理</summary>
    
    
    
    <category term="Nginx" scheme="http://example.com/categories/Nginx/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term=".net core" scheme="http://example.com/tags/net-core/"/>
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>net core web + Docker + Nginx</title>
    <link href="http://example.com/2022/01/19/NetCore%20Nginx%20%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>http://example.com/2022/01/19/NetCore%20Nginx%20%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</id>
    <published>2022-01-19T06:23:15.000Z</published>
    <updated>2022-03-31T01:47:44.874Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="NetCore-Docker-Nginx"><a href="#NetCore-Docker-Nginx" class="headerlink" title=".NetCore Docker Nginx"></a>.NetCore Docker Nginx</h1><h2 id="Test-Program"><a href="#Test-Program" class="headerlink" title="Test Program"></a>Test Program</h2><h3 id="新建-net-core-web应用"><a href="#新建-net-core-web应用" class="headerlink" title="新建 .net core web应用"></a>新建 .net core web应用</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119135939441.png" alt="新建应用"></p><h3 id="添加Docker-支持-linux"><a href="#添加Docker-支持-linux" class="headerlink" title="添加Docker 支持-linux"></a>添加Docker 支持-linux</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119140022112.png" alt="docker支持"></p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119140104644.png" alt="发布设置"></p><h3 id="修改发布后的DockerFile"><a href="#修改发布后的DockerFile" class="headerlink" title="修改发布后的DockerFile"></a>修改发布后的DockerFile</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119140144967.png" alt="发布后的文件"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119140208877.png" alt="修改DockerFile"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">See https://aka.ms/containerfastmode to understand how Visual Studio uses</span> <br>FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base<br>WORKDIR /app<br>EXPOSE 80<br><br>WORKDIR /app<br>COPY .  /app<br>ENTRYPOINT [&quot;dotnet&quot;, &quot;WebDemo.dll&quot;]<br></code></pre></td></tr></table></figure><h3 id="上传到服务器"><a href="#上传到服务器" class="headerlink" title="上传到服务器"></a>上传到服务器</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119140355752.png" alt="xftp"></p><h2 id="Docker-image"><a href="#Docker-image" class="headerlink" title="Docker image"></a>Docker image</h2><h3 id="build-test-program"><a href="#build-test-program" class="headerlink" title="build test program"></a>build test program</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119140542103.png" alt="testProgramBuild"></p><h3 id="pull-nginx"><a href="#pull-nginx" class="headerlink" title="pull nginx"></a>pull nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull nginx<br></code></pre></td></tr></table></figure><h2 id="Docker-Run"><a href="#Docker-Run" class="headerlink" title="Docker Run"></a>Docker Run</h2><h3 id="run-test-program-image"><a href="#run-test-program-image" class="headerlink" title="run test program image"></a>run test program image</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -p 5000:80 --name webdemo.nginx webdemo:v1.0<br></code></pre></td></tr></table></figure><h3 id="添加Nginx配置"><a href="#添加Nginx配置" class="headerlink" title="添加Nginx配置"></a>添加Nginx配置</h3><p><code>myNginx.conf</code>,<code>192.168.137.6</code>为宿主IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /root/nginx/my_nginx.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">内容</span><br>server &#123;<br>  listen 80;<br><br>  location / &#123;<br>    proxy_pass http://192.168.137.6:5000;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="run-nignx-image"><a href="#run-nignx-image" class="headerlink" title="run nignx image"></a>run nignx image</h3><p>挂载到/root/nginx/my_nginx.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -p 8080:80 -v /root/nginx/my_nginx.conf:/etc/nginx/conf.d/default.conf nginx<br></code></pre></td></tr></table></figure><h2 id="Last"><a href="#Last" class="headerlink" title="Last"></a>Last</h2><p>本篇主要是将.Net core web应用放到Linux服务器中，使用Nginx反向代理，进行访问。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119142358772.png" alt="docker容器列表"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119142220882.png" alt="web应用服务"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220119142258548.png" alt="ngixn代理端口"></p>]]></content>
    
    
    <summary type="html">在Docker中通过Nginx反向代理访问.Net Core web 应用</summary>
    
    
    
    <category term="Nginx" scheme="http://example.com/categories/Nginx/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term=".net core" scheme="http://example.com/tags/net-core/"/>
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>multipass 操作指北</title>
    <link href="http://example.com/2022/01/18/multipass-%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8C%97/"/>
    <id>http://example.com/2022/01/18/multipass-%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8C%97/</id>
    <published>2022-01-18T01:53:26.000Z</published>
    <updated>2022-03-31T01:47:44.877Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Multipass-操作指北"><a href="#Multipass-操作指北" class="headerlink" title="Multipass 操作指北"></a>Multipass 操作指北</h1><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220113152838526.png" alt="multipass"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于学习需要操作<code>Docker</code>，有之前使用的<code>VM14PRO</code>+<code>CentOS7</code>+<code>Ubuntu</code>,还有就是<code>docker desktop for windows</code>,现在发现<code>multipass</code> ，忍不住想试试。</p><p>本篇其实是想以虚拟机子系统安装Docker，Docker中安装Consul，模拟Consul集群，客户端进行访问。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118135857819.png" alt="image-20220118135857819"></p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><ul><li>[下载](<a href="https://multipass.run/">Multipass orchestrates virtual Ubuntu instances</a>)</li><li>安装完成之后，右下角托盘中能看到图标，右键图标即可运行shell</li></ul><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><p><code>win+R</code> 运行 <code>cmd</code>  , 查看版本 <code>multipass version</code></p><h3 id="查看虚拟机列表"><a href="#查看虚拟机列表" class="headerlink" title="查看虚拟机列表"></a>查看虚拟机列表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">multipass ls<br></code></pre></td></tr></table></figure><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118101606479.png" alt="虚拟机列表"></p><h3 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h3><p>创建虚拟机<br>语法：multipass launch -n 虚拟机名称<br>-n, –name: 名称<br>-c, –cpus: cpu核心数, 默认: 1<br>-m, –mem: 内存大小, 默认: 1G<br>-d, –disk: 硬盘大小, 默认: 5G</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">multipass launch -n ubuntu-lts -c 4 -m 4G -d 40G<br></code></pre></td></tr></table></figure><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118101648294.png" alt="新建虚拟机"></p><h3 id="进入虚拟机"><a href="#进入虚拟机" class="headerlink" title="进入虚拟机"></a>进入虚拟机</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">multipass shell 虚拟机名称<br></code></pre></td></tr></table></figure><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118101802147.png" alt="进入虚拟机"></p><h3 id="不进入虚拟机直接执行命令"><a href="#不进入虚拟机直接执行命令" class="headerlink" title="不进入虚拟机直接执行命令"></a>不进入虚拟机直接执行命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">multipass exec ubuntu-lts -- ls #语法：multipass exec 虚拟机名称 --命令<br></code></pre></td></tr></table></figure><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118102055691.png" alt="image-20220118102055691"></p><h3 id="查看虚拟机信息"><a href="#查看虚拟机信息" class="headerlink" title="查看虚拟机信息"></a>查看虚拟机信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">multipass info 虚拟机名称<br></code></pre></td></tr></table></figure><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118102212512.png" alt="image-20220118102212512"></p><h3 id="重启虚拟机"><a href="#重启虚拟机" class="headerlink" title="重启虚拟机"></a>重启虚拟机</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">multipass restart 虚拟机名称<br></code></pre></td></tr></table></figure><h3 id="删除虚拟机"><a href="#删除虚拟机" class="headerlink" title="删除虚拟机"></a>删除虚拟机</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">普通删除（可恢复）</span><br>multipass delete 虚拟机名称<br><span class="hljs-meta prompt_"># </span><span class="language-bash">彻底删除</span><br>multipass delete --purge 虚拟机名称 <br></code></pre></td></tr></table></figure><h3 id="恢复删除虚拟机"><a href="#恢复删除虚拟机" class="headerlink" title="恢复删除虚拟机"></a>恢复删除虚拟机</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">multipass recover 虚拟机名称 <br></code></pre></td></tr></table></figure><h3 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">multipass start 虚拟机名称 <br></code></pre></td></tr></table></figure><h3 id="暂停虚拟机"><a href="#暂停虚拟机" class="headerlink" title="暂停虚拟机"></a>暂停虚拟机</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">multipass stop 虚拟机名称 <br></code></pre></td></tr></table></figure><h3 id="挂载宿主机目录"><a href="#挂载宿主机目录" class="headerlink" title="挂载宿主机目录"></a>挂载宿主机目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">multipass mount 宿主机目录 虚拟机名称:虚拟机目录<br></code></pre></td></tr></table></figure><h3 id="卸载挂载目录"><a href="#卸载挂载目录" class="headerlink" title="卸载挂载目录"></a>卸载挂载目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">multipass unmount 虚拟机名称:虚拟机目录<br></code></pre></td></tr></table></figure><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><p>现在multipass 默认安装的是 Ubuntu 20.04.3 LTS</p><h3 id="设置源"><a href="#设置源" class="headerlink" title="设置源"></a>设置源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/apt/sources.list<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">deb http://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse<br>deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse<br>deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse<br>deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse<br>deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse<br>deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse<br>deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse<br>deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse<br>deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse<br>deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><h3 id="修改-root-pwd"><a href="#修改-root-pwd" class="headerlink" title="修改 root pwd"></a>修改 root pwd</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo passwd root<br></code></pre></td></tr></table></figure><h3 id="更新-apt-包索引"><a href="#更新-apt-包索引" class="headerlink" title="更新 apt 包索引"></a>更新 apt 包索引</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br></code></pre></td></tr></table></figure><h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install net-tools<br></code></pre></td></tr></table></figure><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><h4 id="使用-Docker-仓库进行安装"><a href="#使用-Docker-仓库进行安装" class="headerlink" title="使用 Docker 仓库进行安装"></a>使用 Docker 仓库进行安装</h4><ol><li>安装 apt 依赖包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install \</span><br><span class="language-bash">    apt-transport-https \</span><br><span class="language-bash">    ca-certificates \</span><br><span class="language-bash">    curl \</span><br><span class="language-bash">    gnupg-agent \</span><br><span class="language-bash">    software-properties-common</span><br></code></pre></td></tr></table></figure><ol start="2"><li>添加 Docker 的官方 GPG 密钥：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></code></pre></td></tr></table></figure><ol start="3"><li>验证您现在是否拥有带有指纹的密钥</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-key fingerprint 0EBFCD88</span><br>   <br>pub   rsa4096 2017-02-22 [SCEA]<br>      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88<br>uid           [ unknown] Docker Release (CE deb) &lt;docker@docker.com&gt;<br>sub   rsa4096 2017-02-22 [S]<br></code></pre></td></tr></table></figure><ol start="4"><li>使用以下指令设置稳定版仓库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo add-apt-repository \</span><br><span class="language-bash">   <span class="hljs-string">&quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/ \</span></span><br><span class="hljs-string"><span class="language-bash">  <span class="hljs-subst">$(lsb_release -cs)</span> \</span></span><br><span class="hljs-string"><span class="language-bash">  stable&quot;</span></span><br></code></pre></td></tr></table></figure><h4 id="安装-Docker-Engine-Community"><a href="#安装-Docker-Engine-Community" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h4><ol><li>更新 apt 包索引。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br></code></pre></td></tr></table></figure><ol start="2"><li>安装最新版本的 Docker Engine-Community 和 containerd</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><ol start="3"><li>测试Docker</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker run hello-world<br></code></pre></td></tr></table></figure><h4 id="开机自启容器"><a href="#开机自启容器" class="headerlink" title="开机自启容器"></a>开机自启容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl enable docker.service<br></code></pre></td></tr></table></figure><h4 id="获取Consul"><a href="#获取Consul" class="headerlink" title="获取Consul"></a>获取Consul</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull consull<br></code></pre></td></tr></table></figure><h4 id="运行Consul"><a href="#运行Consul" class="headerlink" title="运行Consul"></a>运行Consul</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --publish 8600:8600 --publish 8500:8500 --publish 8300:8300 --publish 8301:8301 --publish 8302:8302 --name consul-01 --restart always \<br>--volume /root/docker/consulone/data:/consul/data \<br>--volume /root/docker/consulone/config:/consul/config consul:latest agent --server --bootstrap-expect=1 --ui --bind=0.0.0.0 --client=0.0.0.0 <br><br>docker run --publish 8501:8500 --name consul-02 --restart always \<br>--volume /root/docker/consultwo/data:/consul/data \<br>--volume /root/docker/consultwo/config:/consul/config consul:latest agent --server --ui --bind=0.0.0.0 --client=0.0.0.0 --join 172.17.0.2<br><br>docker run --publish 8502:8500 --name consul-03 --restart always \<br>--volume /root/docker/consulthree/data:/consul/data \<br>--volume /root/docker/consulthree/config:/consul/config consul:latest agent --server --ui --bind=0.0.0.0 --client=0.0.0.0 --join 172.17.0.2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">http://*:8500  172.17.0.2</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">http://*:8501  172.17.0.3</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">http://*:8502  172.17.0.4</span><br></code></pre></td></tr></table></figure><h2 id="开启SSH登录"><a href="#开启SSH登录" class="headerlink" title="开启SSH登录"></a>开启SSH登录</h2><p>使用<code>xshell and xftp</code></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install openssh-server<br></code></pre></td></tr></table></figure><h3 id="验证开启SSH"><a href="#验证开启SSH" class="headerlink" title="验证开启SSH"></a>验证开启SSH</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -e |grep ssh <br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dpkg --get-selections | grep ssh<br></code></pre></td></tr></table></figure><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118104032656.png" alt="image-20220118104032656"></p><p>如果看到sshd那说明ssh-server已经启动了。</p><p>如果没有则可以这样启动 <code>sudo /etc/init.d/ssh start</code></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>ssh-server配置文件位于<code>/etc/ssh/sshd_config</code>，在这里可以定义SSH的服务端口，默认端口是22，你可以自己定义成其他端口号，如222。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">Port 22<br>LoginGraceTime 2m<br>PermitRootLogin without-password<br>PermitRootLogin yes<br>StrictModes yes<br>RSAAuthentication yes<br>PubkeyAuthentication yes<br></code></pre></td></tr></table></figure><p>别的看着弄，上面这几个配置弄好了就成。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118104744600.png" alt="image-20220118104744600"></p><h3 id="RSA秘钥"><a href="#RSA秘钥" class="headerlink" title="RSA秘钥"></a>RSA秘钥</h3><p>打开xshell，工具-用户秘钥管理者-生成</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118105251888.png" alt="下一步"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118105307456.png" alt="下一步"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118105346104.png" alt="完成"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118105443765.png" alt="这么点"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118105607833.png" alt="点这里"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118105648372.png" alt="喏，这就是那个公钥"></p><p>这个秘钥需要复制到Ubuntu 里。</p><p>先打开 <code>cd ~/.ssh</code></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118105927900.png" alt="定位到文件"></p><p>打开之后就是下面这些，把下面的内容替换成上面生成的公钥即可。</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118105956280.png" alt="image-20220118105956280"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118110131201.png" alt="这么粘"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118110222578.png" alt="粘贴公钥"></p><h3 id="连接xshell"><a href="#连接xshell" class="headerlink" title="连接xshell"></a>连接xshell</h3><p>先获取IP<code>ifconfig</code>,没有的话安装一下<code>sudo apt install net-tools</code></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118110413466.png" alt="获取当前IP"></p><p>配置xshell连接属性</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118110734124.png" alt="连接xshell"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118110800257.png" alt="设置用户密码"></p><p>点击连接</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118110834655.png" alt="接收并保存"></p><p>点击接收并保存，选择Public Key，输入刚才设置的密码，点击确定</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118110924974.png" alt="选择秘钥填充密码"></p><p>连接成功</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220118111009999.png" alt="连接成功"></p><h2 id="设置固定IP"><a href="#设置固定IP" class="headerlink" title="设置固定IP"></a>设置固定IP</h2><p>每次重启IP都变了，xshell还得重新配置IP，设置固定IP搞定</p><h3 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h3><p>想要固定IP，需要在Hype-v 管理器中添加</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220116145911179.png" alt="image-20220116145911179"></p><h3 id="然后新建虚拟机交换机"><a href="#然后新建虚拟机交换机" class="headerlink" title="然后新建虚拟机交换机"></a>然后新建虚拟机交换机</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220116150220744.png" alt="image-20220116150220744"></p><h3 id="设置交换机IP"><a href="#设置交换机IP" class="headerlink" title="设置交换机IP"></a>设置交换机IP</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220116150314941.png" alt="image-20220116150314941"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220116150340431.png" alt="image-20220116150340431"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220116150402104.png" alt="image-20220116150402104"></p><h3 id="分享Internet"><a href="#分享Internet" class="headerlink" title="分享Internet"></a>分享Internet</h3><p>设置完IP之后，</p><p>需要Internet访问的话，需要将现在宿主用的网络分享给vethernet(新建虚拟机)</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220116150646604.png" alt="image-20220116150646604"></p><p>也就是说在 宿主再用的WLAN里点击属性，点击共享选择 vEthernet（新建虚拟交换机），就是刚才咱新建的内部交换机。</p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>至此，宿主这块设置好了。接下来需要设置子系统 Ubuntu。</p><p>先执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/netplan/50-cloud-init.yaml<br></code></pre></td></tr></table></figure><p>insert 模式  i</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220116151058994.png" alt="image-20220116151058994"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">network:<br>    ethernets:<br>        eth0:<br>            dhcp4: no<br>            addresses: [192.168.137.6/24]<br>            optional: true<br>            gateway4: 192.168.137.1<br>            nameservers:<br>                addresses: [8.8.8.8,114.114.114.114]<br>    version: 2<br></code></pre></td></tr></table></figure><p>修改完配置之后，重启网卡。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo netplan apply<br></code></pre></td></tr></table></figure><p>如果通过multipass 的shell 去执行 <code>sudo netplan appyly</code>的话，执行完不报错也没啥反应</p><p>也可以选择在 hype-v 中连接 ，在shell中去输入</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>可以输入 <code>ifconfig</code></p><p>如果报错 需要升级 <code>sudo apt install net-tools </code></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/image-20220116151509554.png" alt="image-20220116151509554"></p><p>不要在意ip不对，我一共启动了三个虚拟机，分别是 5、6、6为后缀的IP</p><h3 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h3><p>固定IP算是设置完毕了，超简单.</p><h2 id="安装-FTP"><a href="#安装-FTP" class="headerlink" title="安装 FTP"></a>安装 FTP</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install vsftpd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置开机启动并启动ftp服务</span><br>systemctl enable vsftpd<br>systemctl start vsftpd<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看其运行状态</span><br>systemctl  status vsftpd<br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启服务</span><br>systemctl  restart vsftpd<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改配置</span><br>sudo /etc/vsftpd.conf<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">存在的修改成酱紫：</span><br>listen=NO # 阻止 vsftpd 在独立模式下运行<br>listen_ipv6=YES # vsftpd 将监听 ipv6 而不是 IPv4，你可以根据你的网络情况设置<br>anonymous_enable=NO # 关闭匿名登录<br>local_enable=YES # 允许本地用户登录<br>write_enable=YES # 启用可以修改文件的 FTP 命令<br>local_umask=022 # 本地用户创建文件的 umask 值<br>dirmessage_enable=YES # 当用户第一次进入新目录时显示提示消息<br>xferlog_enable=YES # 一个存有详细的上传和下载信息的日志文件<br>connect_from_port_20=YES # 在服务器上针对 PORT 类型的连接使用端口 20（FTP 数据）<br>xferlog_std_format=YES # 保持标准日志文件格式<br>pam_service_name=vsftpd # vsftpd 将使用的 PAM 验证设备的名字<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">windows 10 multipass配合Hype-v管理器使用</summary>
    
    
    
    <category term="Ubuntu" scheme="http://example.com/categories/Ubuntu/"/>
    
    
    <category term="multipass" scheme="http://example.com/tags/multipass/"/>
    
    <category term="ubuntu" scheme="http://example.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>微服务之负载均衡示例</title>
    <link href="http://example.com/2022/01/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://example.com/2022/01/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</id>
    <published>2022-01-01T13:23:15.000Z</published>
    <updated>2022-03-31T01:47:44.877Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220101213220.jpeg"></p><h2 id="下载-nginx-download"><a href="#下载-nginx-download" class="headerlink" title="下载 nginx: download"></a>下载 <a href="http://nginx.org/en/download.html">nginx: download</a></h2><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220101205536.png" alt="image-20220101205520096"></p><h2 id="配置Conf"><a href="#配置Conf" class="headerlink" title="配置Conf"></a>配置Conf</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br><span class="hljs-comment">#user  nobody;</span><br>worker_processes  1;<br><br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br><br><br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br><br>http &#123;<br>    include       mime.types;<br>    default_type  application/octet-stream;<br><br>    <span class="hljs-comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><br>    <span class="hljs-comment">#access_log  logs/access.log  main;</span><br><br>    sendfile        on;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    keepalive_timeout  65;<br><br>    <span class="hljs-comment">#gzip  on;</span><br><br><span class="hljs-comment"># 配置多个地址</span><br>    upstream ServiceInstance&#123;<br>        server localhost:5726;<br>        server localhost:5727;<br>        server localhost:5728;<br>    &#125;<br><br>    server &#123;<br>    <span class="hljs-comment"># 监听端口 8080</span><br>        listen       8080;<br>        <br>        <span class="hljs-comment"># 监听本地 可替换成IP</span><br>        server_name  localhost;<br><br>        <span class="hljs-comment">#charset koi8-r;</span><br><br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br>        location / &#123;<br>            <span class="hljs-comment"># root   html;</span><br>            <span class="hljs-comment"># index  index.html index.htm;</span><br>            <br>            <span class="hljs-comment"># 指向配置</span><br>            proxy_pass http://ServiceInstance;<br>        &#125;<br><br>        <span class="hljs-comment">#error_page  404              /404.html;</span><br><br>        <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>        <span class="hljs-comment">#</span><br>        error_page   500 502 503 504  /50x.html;<br>        location = /50x.html &#123;<br>            root   html;<br>        &#125;<br><br>        <span class="hljs-comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ \.php$ &#123;</span><br>        <span class="hljs-comment">#    proxy_pass   http://127.0.0.1;</span><br>        <span class="hljs-comment">#&#125;</span><br><br>        <span class="hljs-comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ \.php$ &#123;</span><br>        <span class="hljs-comment">#    root           html;</span><br>        <span class="hljs-comment">#    fastcgi_pass   127.0.0.1:9000;</span><br>        <span class="hljs-comment">#    fastcgi_index  index.php;</span><br>        <span class="hljs-comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br>        <span class="hljs-comment">#    include        fastcgi_params;</span><br>        <span class="hljs-comment">#&#125;</span><br><br>        <span class="hljs-comment"># deny access to .htaccess files, if Apache&#x27;s document root</span><br>        <span class="hljs-comment"># concurs with nginx&#x27;s one</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ /\.ht &#123;</span><br>        <span class="hljs-comment">#    deny  all;</span><br>        <span class="hljs-comment">#&#125;</span><br>    &#125;<br><br><br>    <span class="hljs-comment"># another virtual host using mix of IP-, name-, and port-based configuration</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#server &#123;</span><br>    <span class="hljs-comment">#    listen       8000;</span><br>    <span class="hljs-comment">#    listen       somename:8080;</span><br>    <span class="hljs-comment">#    server_name  somename  alias  another.alias;</span><br><br>    <span class="hljs-comment">#    location / &#123;</span><br>    <span class="hljs-comment">#        root   html;</span><br>    <span class="hljs-comment">#        index  index.html index.htm;</span><br>    <span class="hljs-comment">#    &#125;</span><br>    <span class="hljs-comment">#&#125;</span><br><br><br>    <span class="hljs-comment"># HTTPS server</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#server &#123;</span><br>    <span class="hljs-comment">#    listen       443 ssl;</span><br>    <span class="hljs-comment">#    server_name  localhost;</span><br><br>    <span class="hljs-comment">#    ssl_certificate      cert.pem;</span><br>    <span class="hljs-comment">#    ssl_certificate_key  cert.key;</span><br><br>    <span class="hljs-comment">#    ssl_session_cache    shared:SSL:1m;</span><br>    <span class="hljs-comment">#    ssl_session_timeout  5m;</span><br><br>    <span class="hljs-comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br>    <span class="hljs-comment">#    ssl_prefer_server_ciphers  on;</span><br><br>    <span class="hljs-comment">#    location / &#123;</span><br>    <span class="hljs-comment">#        root   html;</span><br>    <span class="hljs-comment">#        index  index.html index.htm;</span><br>    <span class="hljs-comment">#    &#125;</span><br>    <span class="hljs-comment">#&#125;</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220101205643.png" alt="image-20220101205640901"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220101205705.png" alt="image-20220101205703680"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220101205720.png" alt="image-20220101205718852"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220101205815.png" alt="image-20220101205813853"></p><h2 id="执行多个应用"><a href="#执行多个应用" class="headerlink" title="执行多个应用"></a>执行多个应用</h2><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220101210216.png" alt="image-20220101210214117"></p><p>执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">dotnet run urls=&quot;http://*:5726&quot;<br>dotnet run urls=&quot;http://*:5727&quot;<br>dotnet run urls=&quot;http://*:5728&quot;<br></code></pre></td></tr></table></figure><h2 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">D:\nginx-1.18.0\nginx-1.18.0&gt;start nginx<br></code></pre></td></tr></table></figure><h2 id="停止Nginx"><a href="#停止Nginx" class="headerlink" title="停止Nginx"></a>停止Nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">D:\nginx-1.18.0\nginx-1.18.0&gt;nginx.exe -s stop<br></code></pre></td></tr></table></figure><h2 id="重启Nginx"><a href="#重启Nginx" class="headerlink" title="重启Nginx"></a>重启Nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -s reload<br></code></pre></td></tr></table></figure><h2 id="访问流程"><a href="#访问流程" class="headerlink" title="访问流程"></a>访问流程</h2><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220101211445.png" alt="访问流程"></p><h2 id="访问结果"><a href="#访问结果" class="headerlink" title="访问结果"></a>访问结果</h2><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220101211706.png" alt="image-20220101211704858"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>Nginx 不能伸缩</p><p>也就是再加一个端口，要把端口加进来让Nginx发现，需要修改配置并且重启Nginx，做不到热处理</p><p>看下面的Consul吧</p><h1 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h1><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220102220532.jpeg" alt="Consul"></p><h2 id="Consul-服务注册"><a href="#Consul-服务注册" class="headerlink" title="Consul 服务注册"></a>Consul 服务注册</h2><p>参考：<a href="https://www.cnblogs.com/pudefu/p/15034011.html">.NET 5.0实现Consul服务注册 - 半山上的人 - 博客园 (cnblogs.com)</a></p><h2 id="Consul-1-7-2"><a href="#Consul-1-7-2" class="headerlink" title="Consul 1.7.2"></a>Consul 1.7.2</h2><p><a href="http://localhost:8500/">http://localhost:8500</a> 1.7.2 长这样</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220102201501.png" alt="image-20220102201451530"></p><h2 id="consul-1-11-1"><a href="#consul-1-11-1" class="headerlink" title="consul 1.11.1"></a>consul 1.11.1</h2><p><a href="http://localhost:8500/">http://localhost:8500</a> 1.11.1 长这样</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220102211047.png" alt="image-20220102211045421"></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="appsetting-json-配置文件"><a href="#appsetting-json-配置文件" class="headerlink" title="appsetting.json 配置文件"></a>appsetting.json 配置文件</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;Logging&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;LogLevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;Default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Information&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;Microsoft&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Warning&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;Microsoft.Hosting.Lifetime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Information&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;AllowedHosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;*&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;ConsulConfig&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;ServiceId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;d72e7de8b01a43acac640b1a00b26c81&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//可以换成Guid</span><br>    <span class="hljs-attr">&quot;ServiceName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HarrisService&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ServiceIP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//当前应用部署的服务器IP地址</span><br>    <span class="hljs-attr">&quot;ServicePort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5726</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//当前应用部署的服务器端口  可以去参数传来得Port</span><br>    <span class="hljs-attr">&quot;ConsulIP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//Consul部署的服务器IP地址</span><br>    <span class="hljs-attr">&quot;ConsulPort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8500</span> <span class="hljs-comment">//Consul端口</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Model-实体类"><a href="#Model-实体类" class="headerlink" title="Model 实体类"></a>Model 实体类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> <span class="hljs-title">ConsulTest.Models</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ServiceConfig</span><br>    &#123;<br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 服务唯一ID</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> ServiceId &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 服务部署的IP</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> ServiceIP &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 服务部署的端口</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> ServicePort &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 服务名称</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> ServiceName &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> consul部署的IP</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> ConsulIP &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> consul端口</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> ConsulPort &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 权重</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> weight &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="AppBuilderExtensions-帮助类"><a href="#AppBuilderExtensions-帮助类" class="headerlink" title="AppBuilderExtensions 帮助类"></a>AppBuilderExtensions 帮助类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> Consul;<br><span class="hljs-keyword">using</span> ConsulTest.Models;<br><span class="hljs-keyword">using</span> Microsoft.AspNetCore.Builder;<br><span class="hljs-keyword">using</span> Microsoft.Extensions.Hosting;<br><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">ConsulTest.Untiy</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AppBuilderExtensions</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IApplicationBuilder <span class="hljs-title">RegisterConsul</span>(<span class="hljs-params"><span class="hljs-keyword">this</span> IApplicationBuilder app, IHostApplicationLifetime lifetime, ServiceConfig serviceConfig</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">var</span> consulClient = <span class="hljs-keyword">new</span> ConsulClient(x =&gt; x.Address = <span class="hljs-keyword">new</span> Uri(<span class="hljs-string">$&quot;http://<span class="hljs-subst">&#123;serviceConfig.ConsulIP&#125;</span>:<span class="hljs-subst">&#123;serviceConfig.ConsulPort&#125;</span>&quot;</span>));<br>            <span class="hljs-keyword">var</span> httpCheck = <span class="hljs-keyword">new</span> AgentServiceCheck()<br>            &#123;<br>                DeregisterCriticalServiceAfter = TimeSpan.FromSeconds(<span class="hljs-number">5</span>),<span class="hljs-comment">//服务器启动5秒后注册</span><br>                Interval = TimeSpan.FromMinutes(<span class="hljs-number">1</span>),<span class="hljs-comment">//每分钟检测一次（健康检查间隔时间）</span><br>                HTTP = <span class="hljs-string">$&quot;http://<span class="hljs-subst">&#123;serviceConfig.ServiceIP&#125;</span>:<span class="hljs-subst">&#123;serviceConfig.ServicePort&#125;</span>/api/health&quot;</span>,<span class="hljs-comment">//本服务健康检查地址</span><br>                Timeout = TimeSpan.FromSeconds(<span class="hljs-number">20</span>),<br>            &#125;;<br>            <span class="hljs-keyword">var</span> registerAgent = <span class="hljs-keyword">new</span> AgentServiceRegistration()<br>            &#123;<br>                Check = httpCheck,<br>                Checks = <span class="hljs-keyword">new</span>[] &#123; httpCheck &#125;,<br>                ID = serviceConfig.ServiceId,<span class="hljs-comment">//一定要指定服务ID，否则每次都会创建一个新的服务节点</span><br>                Name = serviceConfig.ServiceName,<br>                Address = serviceConfig.ServiceIP,<br>                Port = serviceConfig.ServicePort,<br>                Tags = <span class="hljs-keyword">new</span>[] &#123; <span class="hljs-string">$&quot;urlprefix-/<span class="hljs-subst">&#123;serviceConfig.ServiceName&#125;</span>&quot;</span> &#125;<span class="hljs-comment">//添加 urlprefix-/servicename 格式的tag标签，以便Fabio识别</span><br>            &#125;;<br>            consulClient.Agent.ServiceRegister(registerAgent).Wait();<span class="hljs-comment">//服务启动时注册，使用Consul API进行注册（HttpClient发起）</span><br>            lifetime.ApplicationStopped.Register(() =&gt;<br>            &#123;<br>                consulClient.Agent.ServiceDeregister(registerAgent.ID).Wait();<span class="hljs-comment">//服务器停止时取消注册</span><br>            &#125;);<br>            <span class="hljs-keyword">return</span> app;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Startup-注册Consul"><a href="#Startup-注册Consul" class="headerlink" title="Startup 注册Consul"></a>Startup 注册Consul</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> ConsulTest.Models;<br><span class="hljs-keyword">using</span> ConsulTest.Untiy;<br><span class="hljs-keyword">using</span> Microsoft.AspNetCore.Builder;<br><span class="hljs-keyword">using</span> Microsoft.AspNetCore.Hosting;<br><span class="hljs-keyword">using</span> Microsoft.AspNetCore.Mvc;<br><span class="hljs-keyword">using</span> Microsoft.Extensions.Configuration;<br><span class="hljs-keyword">using</span> Microsoft.Extensions.DependencyInjection;<br><span class="hljs-keyword">using</span> Microsoft.Extensions.Hosting;<br><span class="hljs-keyword">using</span> Microsoft.Extensions.Logging;<br><span class="hljs-keyword">using</span> Microsoft.OpenApi.Models;<br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.Linq;<br><span class="hljs-keyword">using</span> System.Threading.Tasks;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">ConsulTest</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Startup</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Startup</span>(<span class="hljs-params">IConfiguration configuration</span>)</span><br>        &#123;<br>            Configuration = configuration;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> IConfiguration Configuration &#123; <span class="hljs-keyword">get</span>; &#125;<br><br>        <span class="hljs-comment">// This method gets called by the runtime. Use this method to add services to the container.</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ConfigureServices</span>(<span class="hljs-params">IServiceCollection services</span>)</span><br>        &#123;<br><br>            services.AddControllers();<br>            services.AddSwaggerGen(c =&gt;<br>            &#123;<br>                c.SwaggerDoc(<span class="hljs-string">&quot;v1&quot;</span>, <span class="hljs-keyword">new</span> OpenApiInfo &#123; Title = <span class="hljs-string">&quot;ConsulTest&quot;</span>, Version = <span class="hljs-string">&quot;v1&quot;</span> &#125;);<br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-comment">// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Configure</span>(<span class="hljs-params">IApplicationBuilder app, IWebHostEnvironment env, IHostApplicationLifetime lifetime,IConfiguration configuration</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (env.IsDevelopment())<br>            &#123;<br>                app.UseDeveloperExceptionPage();<br>                app.UseSwagger();<br>                app.UseSwaggerUI(c =&gt; c.SwaggerEndpoint(<span class="hljs-string">&quot;/swagger/v1/swagger.json&quot;</span>, <span class="hljs-string">&quot;ConsulTest v1&quot;</span>));<br>            &#125;<br><br>            app.UseRouting();<br><br>            app.UseAuthorization();<br><br>            <span class="hljs-meta">#<span class="hljs-keyword">region</span> 注册Consul服务</span><br><br>            <span class="hljs-keyword">var</span> serviceConfig = Configuration.GetSection(<span class="hljs-string">&quot;ConsulConfig&quot;</span>).Get&lt;ServiceConfig&gt;();<br><br>            <span class="hljs-comment">//获取weight</span><br>            <span class="hljs-built_in">int</span> weight = <span class="hljs-built_in">string</span>.IsNullOrWhiteSpace(configuration[<span class="hljs-string">&quot;weight&quot;</span>]) ? <span class="hljs-number">1</span> : <span class="hljs-built_in">int</span>.Parse(configuration[<span class="hljs-string">&quot;weight&quot;</span>]);<br><br>            serviceConfig.weight = weight;<br><br>            serviceConfig.ServiceId = <span class="hljs-string">&quot;Service&quot;</span> + Guid.NewGuid().ToString();<br><br>            <span class="hljs-comment">//获取端口</span><br>            <span class="hljs-built_in">int</span> port = <span class="hljs-built_in">int</span>.Parse(configuration[<span class="hljs-string">&quot;port&quot;</span>]);<br><br>            serviceConfig.ServicePort = port;<br><br>            Console.WriteLine(port);<br><br>            app.RegisterConsul(lifetime, serviceConfig);<br><br>            <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br><br>            app.UseEndpoints(endpoints =&gt;<br>            &#123;<br>                endpoints.MapControllers();<br>            &#125;);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="启动Consul"><a href="#启动Consul" class="headerlink" title="启动Consul"></a>启动Consul</h2><p>consul agent -dev（如果需要其他机器访问，命令为consul agent -dev -client 0.0.0.0 -ui）</p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220102215501.png" alt="image-20220102215459287"></p><h2 id="启动API应用"><a href="#启动API应用" class="headerlink" title="启动API应用"></a>启动API应用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">dotnet run --urls=&quot;http://*:5726&quot; --ip=127.0.0.1 --port=5726 --weight=2<br>dotnet run --urls=&quot;http://*:5727&quot; --ip=127.0.0.1 --port=5727 --weight=3<br>dotnet run --urls=&quot;http://*:5728&quot; --ip=127.0.0.1 --port=5728 --weight=4<br>dotnet run --urls=&quot;http://*:5729&quot; --ip=127.0.0.1 --port=5729 --weight=5<br></code></pre></td></tr></table></figure><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220102221132.png" alt="image-20220102215640307"></p><h2 id="Consul-应用界面"><a href="#Consul-应用界面" class="headerlink" title="Consul 应用界面"></a>Consul 应用界面</h2><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220102211047.png" alt="image-20220102211045421"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220102221139.png" alt="image-20220102215804743"></p><h2 id="Consul-服务发现"><a href="#Consul-服务发现" class="headerlink" title="Consul 服务发现"></a>Consul 服务发现</h2><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220102220007.png" alt="image-20220102220005859"></p><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220102220043.png" alt="image-20220102220034369"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> Consul;<br><span class="hljs-keyword">using</span> CustomerDemo.Models;<br><span class="hljs-keyword">using</span> Microsoft.AspNetCore.Mvc;<br><span class="hljs-keyword">using</span> Microsoft.Extensions.Logging;<br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.Diagnostics;<br><span class="hljs-keyword">using</span> System.Linq;<br><span class="hljs-keyword">using</span> System.Threading.Tasks;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">CustomerDemo.Controllers</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">HomeController</span> : <span class="hljs-title">Controller</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> ILogger&lt;HomeController&gt; _logger;<br><br>        <span class="hljs-comment">// （随机标识）没考虑溢出问题，到达一定长度应该重置</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> iSeed = <span class="hljs-number">0</span>;<br><br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HomeController</span>(<span class="hljs-params">ILogger&lt;HomeController&gt; logger</span>)</span><br>        &#123;<br>            _logger = logger;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> IActionResult <span class="hljs-title">Index</span>()</span><br>        &#123;<br>            <span class="hljs-meta">#<span class="hljs-keyword">region</span> Consul 服务发现</span><br><br>            ConsulClient client = <span class="hljs-keyword">new</span> ConsulClient(c =&gt;<br>            &#123;<br>                c.Address = <span class="hljs-keyword">new</span> Uri(<span class="hljs-string">&quot;http://localhost:8500&quot;</span>);<br>                c.Datacenter = <span class="hljs-string">&quot;dc1&quot;</span>;<br>            &#125;);<br><br>            <span class="hljs-keyword">var</span> response = client.Agent.Services().Result.Response;<br><br>            <span class="hljs-built_in">string</span> url = <span class="hljs-string">&quot;http://HarrisService/WeatherForecast&quot;</span>;<br><br>            Uri uri = <span class="hljs-keyword">new</span> Uri(url);<br><br>            <span class="hljs-built_in">string</span> groupName = uri.Host;<br><br>            AgentService service = <span class="hljs-literal">null</span>;<br><br>            <span class="hljs-keyword">var</span> serviceDictionary = response.Where(s =&gt; s.Value.Service.Equals(groupName, StringComparison.OrdinalIgnoreCase)).ToList();<br><br>            <span class="hljs-comment"><span class="hljs-doctag">///</span>/方便测试这里取第一个</span><br>            <span class="hljs-comment">//&#123;</span><br>            <span class="hljs-comment">//    service = serviceDictionary.FirstOrDefault().Value;</span><br>            <span class="hljs-comment">//&#125;</span><br><br>            <span class="hljs-comment">//均衡策略实现</span><br>            &#123;<br>                <span class="hljs-comment">//随机策略---平均策略</span><br>                <span class="hljs-comment">//Random rd = new Random();</span><br>                <span class="hljs-comment">//int index = rd.Next(serviceDictionary.Count);</span><br>                <span class="hljs-comment">//service = serviceDictionary[index].Value;</span><br><br>                <span class="hljs-comment">// 随机策略/平均策略</span><br>                <span class="hljs-comment">//var array = serviceDictionary.ToArray();</span><br>                <span class="hljs-comment">//service = array[new Random(iSeed++).Next(0, array.Length)].Value;</span><br>            &#125;<br><br>            <span class="hljs-comment">// 轮巡策略 / 平均策略</span><br>            &#123;<br>                <span class="hljs-comment">//var array = serviceDictionary.ToArray();</span><br>                <span class="hljs-comment">//service = array[iSeed++ % array.Length].Value;// 取余数：就能按照0 1 2 的顺序调用</span><br>            &#125;<br><br>            <span class="hljs-comment">// 权重模式</span><br>            &#123;<br>                List&lt;KeyValuePair&lt;<span class="hljs-built_in">string</span>, AgentService&gt;&gt; serviceList = <span class="hljs-keyword">new</span> List&lt;KeyValuePair&lt;<span class="hljs-built_in">string</span>, AgentService&gt;&gt;();<br><br>                <span class="hljs-keyword">foreach</span> (KeyValuePair&lt;<span class="hljs-built_in">string</span>, AgentService&gt; agentService <span class="hljs-keyword">in</span> serviceDictionary)<br>                &#123;<br>                    <span class="hljs-built_in">int</span> count = <span class="hljs-built_in">int</span>.Parse(agentService.Value.Tags[<span class="hljs-number">0</span>]);<br><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; count; i++)<br>                    &#123;<br>                        serviceList.Add(agentService);<br>                    &#125;<br>                &#125;<br><br>                service = serviceList[<span class="hljs-keyword">new</span> Random(iSeed++).Next(<span class="hljs-number">0</span>, serviceList.Count())].Value;<br>            &#125;<br><br>            url = <span class="hljs-string">$&quot;<span class="hljs-subst">&#123;uri.Scheme&#125;</span>://<span class="hljs-subst">&#123;service.Address&#125;</span>:<span class="hljs-subst">&#123;service.Port&#125;</span><span class="hljs-subst">&#123;uri.PathAndQuery&#125;</span>&quot;</span>;<br><br>            <span class="hljs-built_in">string</span> content = Untiy.WebApiHelperExtend.InvokeApi(url);<br><br>            <span class="hljs-keyword">var</span> weather = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;List&lt;WeatherForecast&gt;&gt;(content);<br><br>            <span class="hljs-keyword">this</span>.ViewData[<span class="hljs-string">&quot;weather&quot;</span>] = weather;<br><br>            <span class="hljs-keyword">this</span>.ViewData[<span class="hljs-string">&quot;Url&quot;</span>] = url;<br><br>            <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br><br>            <span class="hljs-keyword">return</span> View();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> IActionResult <span class="hljs-title">Privacy</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> View();<br>        &#125;<br><br>        [<span class="hljs-meta">ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)</span>]<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> IActionResult <span class="hljs-title">Error</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> View(<span class="hljs-keyword">new</span> ErrorViewModel &#123; RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier &#125;);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Index-cshtml"><a href="#Index-cshtml" class="headerlink" title="Index.cshtml"></a>Index.cshtml</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs csharp">@&#123;<br>    ViewData[<span class="hljs-string">&quot;Title&quot;</span>] = <span class="hljs-string">&quot;Home Page&quot;</span>;<br>&#125;<br><br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;<br>    &lt;h1 <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;display-4&quot;</span>&gt;Welcome&lt;/h1&gt;<br><br>    &lt;h2&gt;Weather&lt;/h2&gt;<br><br>    &lt;ul&gt;<br><br>        @foreach (WeatherForecast item <span class="hljs-keyword">in</span> ViewData[<span class="hljs-string">&quot;weather&quot;</span>] <span class="hljs-keyword">as</span> List&lt;WeatherForecast&gt;)<br>        &#123;<br>            &lt;li&gt;@item.summary +@item.date.ToString()+ @item.summary+@item.temperatureC+@item.temperatureF &lt;/li&gt;<br>        &#125;<br><br>    &lt;/ul&gt;<br><br>    &lt;h2&gt;@this.ViewData[<span class="hljs-string">&quot;Url&quot;</span>]&lt;/h2&gt;<br><br>    &lt;p&gt;Learn about &lt;a href=<span class="hljs-string">&quot;https://docs.microsoft.com/aspnet/core&quot;</span>&gt;building Web apps <span class="hljs-keyword">with</span> ASP.NET Core&lt;/a&gt;.&lt;/p&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="WebApiHelperExtend-cs"><a href="#WebApiHelperExtend-cs" class="headerlink" title="WebApiHelperExtend.cs"></a>WebApiHelperExtend.cs</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Net.Http;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">CustomerDemo.Untiy</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 接口调用帮助类</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">WebApiHelperExtend</span><br>    &#123;<br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 模拟调用接口</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;url&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">InvokeApi</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> url</span>)</span><br>        &#123;<br>            <span class="hljs-comment">// 提供基类，用于从由URI标识的资源发送HTTP请求和接收HTTP响应。</span><br>            <span class="hljs-keyword">using</span> (HttpClient httpClient = <span class="hljs-keyword">new</span> HttpClient())<br>            &#123;<br>                <span class="hljs-comment">// Http请求消息</span><br>                HttpRequestMessage message = <span class="hljs-keyword">new</span> HttpRequestMessage();<br>                <span class="hljs-comment">// 请求方式</span><br>                message.Method = HttpMethod.Get;<br>                <span class="hljs-comment">// 请求地址</span><br>                message.RequestUri = <span class="hljs-keyword">new</span> Uri(url);<br>                <span class="hljs-comment">// 以异步操作的形式发送HTTP请求。并接收响应信息</span><br>                <span class="hljs-keyword">var</span> result = httpClient.SendAsync(message).Result;<br>                <span class="hljs-comment">// 将HTTP内容序列化为字符串</span><br>                <span class="hljs-built_in">string</span> content = result.Content.ReadAsStringAsync().Result;<br>                <span class="hljs-keyword">return</span> content;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">WeatherForecast</span><br>&#123;<br>    <span class="hljs-keyword">public</span> DateTime date &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> temperatureC &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> temperatureF &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> summary &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220103171437.png" alt="image-20220103171428670"></p><h2 id="Docker-For-Consul"><a href="#Docker-For-Consul" class="headerlink" title="Docker For Consul"></a>Docker For Consul</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker pull consul <span class="hljs-comment"># 默认拉取latest</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker pull consul:1.6.1 <span class="hljs-comment"># 拉取指定版本</span></span><br></code></pre></td></tr></table></figure><h3 id="运行第一个节点-leader"><a href="#运行第一个节点-leader" class="headerlink" title="运行第一个节点 leader"></a>运行第一个节点 leader</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --publish 8600:8600 --publish 8500:8500 --publish 8300:8300 --publish 8301:8301 --publish 8302:8302 --name consul-01 --restart always --volume D:\docker\Consul\Consul-01\data:/consul/data --volume D:\docker\Consul\Consul-01\config:/consul/config consul:latest agent --server --bootstrap-expect=1 --ui --bind=0.0.0.0 --client=0.0.0.0 <br></code></pre></td></tr></table></figure><ul><li>其中，端口示意：<ul><li><code>8500</code>端口，用于Consul的HTTP接口及Web UI界面。</li><li><code>8600</code>端口，用于Consul已注册服务的DNS服务。</li><li><code>8300</code>端口，用于同一数据中心内Consul Server的RPC通信。</li><li><code>8301</code>端口，用于同一数据中心内Consul Server的gossip serf lan通信。</li><li><code>8302</code>端口，用于不同数据中心内Consul Server的gossip serf wan通信。</li></ul></li></ul><ul><li><p>其中，参数示意：</p><ul><li><p><code>–net=host</code> docker参数, 使得docker容器越过了net namespace的隔离，免去手动指定端口映射的步骤</p></li><li><p><code>-server</code> consul支持以server或client的模式运行, server是服务发现模块的核心, client主要用于转发请求</p></li><li><p><code>-advertise</code> 将本机私有IP传递到consul</p></li><li><p><code>-retry-join</code> 指定要加入的consul节点地址，失败后会重试, 可多次指定不同的地址</p></li><li><p><code>-client</code> 指定consul绑定在哪个client地址上，这个地址可提供HTTP、DNS、RPC等服务，默认是&gt;127.0.0.1</p></li><li><p><code>-bind</code> 绑定服务器的ip地址；该地址用来在集群内部的通讯，集群内的所有节点到地址必须是可达的，&gt;默认是0.0.0.0</p></li><li><p><code>allow_stale</code> 设置为true则表明可从consul集群的任一server节点获取dns信息, false则表明每次请求都会&gt;经过consul的server leader</p></li><li><p><code>-bootstrap-expect</code> 数据中心中预期的服务器数。指定后，Consul将等待指定数量的服务器可用，然后&gt;启动群集。允许自动选举leader，但不能与传统-bootstrap标志一起使用, 需要在server模式下运行。</p></li><li><p><code>-data-dir</code> 数据存放的位置，用于持久化保存集群状态</p></li><li><p><code>-node</code> 群集中此节点的名称，这在群集中必须是唯一的，默认情况下是节点的主机名。</p></li><li><p><code>-config-dir</code> 指定配置文件，当这个目录下有 .json 结尾的文件就会被加载，详细可参考<a href="https://www.consul.io/docs/agent/options.html#configuration_files">https://www.consul.io/docs/agent/options.html#configuration_files</a></p></li><li><p><code>-enable-script-checks</code> 检查服务是否处于活动状态，类似开启心跳</p></li><li><p><code>-datacenter</code> 数据中心名称</p></li><li><p><code>-ui</code> 开启ui界面</p></li><li><p><code>-join</code> 指定ip, 加入到已有的集群中</p></li></ul></li></ul><h3 id="查看已存在节点的IP"><a href="#查看已存在节点的IP" class="headerlink" title="查看已存在节点的IP"></a>查看已存在节点的IP</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker inspect --format=&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27; consul-01<br></code></pre></td></tr></table></figure><h3 id="开启第二个节点"><a href="#开启第二个节点" class="headerlink" title="开启第二个节点"></a>开启第二个节点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --publish 8501:8500 --name consul-02 --restart always --volume D:\docker\Consul\Consul-02\data:/consul/data --volume D:\docker\Consul\Consul-02\config:/consul/config consul:latest agent --server --ui --bind=0.0.0.0 --client=0.0.0.0 --join 172.17.0.2<br></code></pre></td></tr></table></figure><h3 id="开启第三个节点"><a href="#开启第三个节点" class="headerlink" title="开启第三个节点"></a>开启第三个节点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --publish 8502:8500 --name consul-03 --restart always --volume D:\docker\Consul\Consul-03\data:/consul/data --volume D:\docker\Consul\Consul-03\config:/consul/config consul:latest agent --server --ui --bind=0.0.0.0 --client=0.0.0.0 --join 172.17.0.2<br></code></pre></td></tr></table></figure><h3 id="查看Consul集群信息"><a href="#查看Consul集群信息" class="headerlink" title="查看Consul集群信息"></a>查看Consul集群信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shelll">docker exec -it consul-01 consul members<br></code></pre></td></tr></table></figure><h3 id="查看容器IP"><a href="#查看容器IP" class="headerlink" title="查看容器IP"></a>查看容器IP</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shel">docker inspect NAMES<br># 查看容器所有状态信息；<br>docker inspect --format=&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27;<br># 查看 容器ip 地址<br>docker inspect --format &#x27;&#123;&#123;.Name&#125;&#125; &#123;&#123;.State.Running&#125;&#125;&#x27;<br># 容器运行状态<br></code></pre></td></tr></table></figure><h2 id="net-core-发布"><a href="#net-core-发布" class="headerlink" title="net core 发布"></a>net core 发布</h2><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20220110225514.png" alt="img"></p><h3 id="新建Dockerfile"><a href="#新建Dockerfile" class="headerlink" title="新建Dockerfile"></a>新建Dockerfile</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM mcr.microsoft.com/dotnet/aspnet:5.0 AS base<br>WORKDIR /app<br>EXPOSE 80<br><br>WORKDIR /app<br>COPY .  /app<br>ENTRYPOINT [&quot;dotnet&quot;, &quot;ConsulTest.dll&quot;]<br></code></pre></td></tr></table></figure><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker build -t consultest02:v2.0 .<br></code></pre></td></tr></table></figure><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --name consultest02 -p 80:80 -d consultest02:v2.0<br></code></pre></td></tr></table></figure><h3 id="宿主访问容器"><a href="#宿主访问容器" class="headerlink" title="宿主访问容器"></a>宿主访问容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">添加路由<br>route -p add 172.17.0.0 MASK 255.255.255.0 192.168.65.2<br>删除路由<br>route delete 172.17.0.0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Nginx+Consul 负载均衡示例</summary>
    
    
    
    <category term="Nginx" scheme="http://example.com/categories/Nginx/"/>
    
    
    <category term=".net core" scheme="http://example.com/tags/net-core/"/>
    
    <category term="Nginx" scheme="http://example.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>微服务基础知识</title>
    <link href="http://example.com/2022/01/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2022/01/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2022-01-01T13:23:15.000Z</published>
    <updated>2022-03-31T01:47:44.878Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="微服务基础知识"><a href="#微服务基础知识" class="headerlink" title="微服务基础知识"></a>微服务基础知识</h1><h2 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h2><p>先说百度百科给的定义</p><p>​        一种软件开发技术- 面向服务的体系结构（<code>SOA</code>）架构样式的一种变体，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相沟通（通常是基于HTTP的<code>Restful API</code>）。每个服务都围绕着具体业务进行构建，并且能够独立地部署到生产环境、类生产环境等。另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据上下文，选择合适的语言、工具对其进行构建。</p><p>结合网上大佬的帖子，光说微服务体会不到微服务，有人说的对，聊到概念，应该是从现有的<strong>单体应用</strong>与<strong>微服务架构</strong>进行比较才能得出结论。</p><h3 id="传统架构-amp-微服务架构"><a href="#传统架构-amp-微服务架构" class="headerlink" title="传统架构&amp;微服务架构"></a>传统架构&amp;微服务架构</h3><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com//image-20220213115320787.png" alt="image-20220213115320787"></p><h2 id="微服务的优点"><a href="#微服务的优点" class="headerlink" title="微服务的优点"></a>微服务的优点</h2><ul><li>微服务是<strong>松藕合</strong>的，无论是在开发阶段或部署阶段都是独立的。</li><li>能够快速响应, 局部修改容易, 一个服务出现问题不会影响整个应用。</li><li>易于和第三方应用系统集成, 支持使用<strong>不同的语言开发</strong>, 允许你利用融合最新技术。</li><li>每个微服务都很小，足够内聚，足够小，代码容易理解。团队能够更关注自己的工作成果, 聚焦指定的业务功能或业务需求。</li><li>开发简单、开发效率提高，一个服务可能就是专一的只干一件事, 能够被小团队单独开发，这个小团队可以是 2 到 5 人的开发人员组成。</li></ul><h2 id="微服务的缺点"><a href="#微服务的缺点" class="headerlink" title="微服务的缺点"></a>微服务的缺点</h2><ul><li>由于服务增加，复杂性同时增加，在生产环境中项目涉及到的微服务数量会很庞杂，尤其是在微服务之间的互相调用。</li><li>资源一致性</li><li>运维成本增加，也就是需要更多的<code>DevOps</code>操作</li><li>由于分布式部署问题追踪问题难</li></ul><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ol><li><p><strong>单一职责</strong>：每个微服务只需要实现自己的业务逻辑就可以了，比如订单管理模块，它只需要处理订单的业务逻辑就可以了，其它的不必考虑</p></li><li><p><strong>服务自治</strong>：每个微服务从开发、测试、运维等都是独立的，包括存储的数据库也都是独立的，自己就有一套完整的流程，我们完全可以把它当成一个项目来对待。不必依赖于其它模块。</p></li><li><p><strong>轻量级通信</strong>：首先是通信的语言非常的轻量，第二，该通信方式需要是跨语言、跨平台的，之所以要跨平台、跨语言就是为了让每个微服务都有足够的独立性，可以不受技术的钳制。</p></li><li><p><strong>接口明确</strong>：由于微服务之间可能存在着调用关系，为了尽量避免以后由于某个微服务的接口变化而导致其它微服务都做调整，在设计之初就要考虑到所有情况，让接口尽量做的更通用，更灵活，从而尽量避免其它模块也做调整。</p></li></ol><h2 id="微服务如何拆分"><a href="#微服务如何拆分" class="headerlink" title="微服务如何拆分"></a>微服务如何拆分</h2><h2 id="微服务技术栈"><a href="#微服务技术栈" class="headerlink" title="微服务技术栈"></a>微服务技术栈</h2><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvODI0MjkxLzIwMjAwNC84MjQyOTEtMjAyMDA0MDYyMjMxMDM3MzAtNTI3NjA5NzU4LmpwZw" alt="img"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://blog.csdn.net/a312586670/article/details/105375184/">.Net Core微服务架构技术栈的那些事</a></p></li><li><p><a href="https://www.cnblogs.com/xiao-feng/p/9129784.html">微服务定义及.Net Core中用的技术 - me黄小峰 - 博客园</a></p></li></ul>]]></content>
    
    
    <summary type="html">微服务基础知识</summary>
    
    
    
    <category term="MicroService" scheme="http://example.com/categories/MicroService/"/>
    
    
    <category term="MicroService" scheme="http://example.com/tags/MicroService/"/>
    
  </entry>
  
  <entry>
    <title>Docker for MongoDB</title>
    <link href="http://example.com/2021/12/01/Docker-for-MongoDB/"/>
    <id>http://example.com/2021/12/01/Docker-for-MongoDB/</id>
    <published>2021-12-01T14:34:32.000Z</published>
    <updated>2022-04-26T07:23:26.452Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker-for-MongoDB"><a href="#Docker-for-MongoDB" class="headerlink" title="Docker for MongoDB"></a>Docker for MongoDB</h1><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20211201225103.jpeg"></p><h2 id="安装镜像"><a href="#安装镜像" class="headerlink" title="安装镜像"></a>安装镜像</h2><p><code>docker pull mongo</code></p><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p><code>docker run --name mongo -v /docker/mongodb/data:/data/db -d -p 27017:27017 mongo</code></p><h2 id="配置账号密码"><a href="#配置账号密码" class="headerlink" title="配置账号密码"></a>配置账号密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it mongo /bin/sh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mongo admin</span><br></code></pre></td></tr></table></figure><h2 id="创建Mongo账号"><a href="#创建Mongo账号" class="headerlink" title="创建Mongo账号"></a>创建Mongo账号</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">//选择admin数据库<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">use admin</span> <br>//创建账号<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">db.createUser(&#123;user: <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-built_in">pwd</span>: <span class="hljs-string">&#x27;admin123456&#x27;</span>, roles: [&#123;role: <span class="hljs-string">&quot;userAdminAnyDatabase&quot;</span>, db: <span class="hljs-string">&quot;admin&quot;</span> &#125;]&#125;);</span> <br>//测试账号<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"> db.auth(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;admin123456&#x27;</span>)</span> <br></code></pre></td></tr></table></figure><h2 id="登录测试"><a href="#登录测试" class="headerlink" title="登录测试"></a>登录测试</h2><p><img src="https://blogimage-1255495010.cos.ap-beijing.myqcloud.com/20211201223653.png" alt="MongoDB"></p>]]></content>
    
    
    <summary type="html">windows docker安装MongoDB</summary>
    
    
    
    <category term="MongoDB" scheme="http://example.com/categories/MongoDB/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="MongoDB" scheme="http://example.com/tags/MongoDB/"/>
    
  </entry>
  
</feed>
